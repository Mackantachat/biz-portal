using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace BizPortal.Utils.Security
{
    public static class Vulnerability
    {
        public static DirectoryInfo SecureCreateDirectory(string directoryPath)
        {
            string validatedDirPath = GetValidatedDirectoryName(directoryPath);
            if (!string.IsNullOrEmpty(validatedDirPath) && Directory.Exists(validatedDirPath))
                // Directory can be created under the root path.
                return Directory.CreateDirectory(validatedDirPath);
            return null;
        }

        public static bool SecureDeleteFile(string filePath)
        {
            FileInfo file = new FileInfo(filePath);
            string validatedPath = GetValidatedFileName(file.Directory.FullName, file.Name);

            if (!string.IsNullOrEmpty(validatedPath) && File.Exists(validatedPath))
            {
                // File can be deleted under the root path.
                File.Delete(validatedPath);
                return true;
            }
            return false;
        }

        public static string GetValidatedDirectoryName(string directoryPath)
        {
            string result = string.Empty;
            if (IsUnderRootPath(directoryPath))
            {
                DirectoryInfo di = new DirectoryInfo(directoryPath);
                if (!di.Exists)
                    di.Create();
                    return di.FullName;
            }
            return result;
        }

        public static string GetValidatedFileName(string directoryPath, string fileName)
        {
            string result = string.Empty;
            string validatedDirPath = GetValidatedDirectoryName(directoryPath);
            if (!string.IsNullOrEmpty(validatedDirPath) && IsUnderRootPath(validatedDirPath))
            {
                FileInfo fi = new FileInfo(string.Format("{0}\\{1}", validatedDirPath, fileName));
                return fi.FullName;
                //DirectoryInfo di = new DirectoryInfo(validatedDirPath);
                //FileInfo[] files = di.GetFiles(fileName);
                //if (files.Any())
                //{
                //    result = files[0].FullName;
                //}
            }
            return result;
        }

        public static bool IsUnderRootPath(string directoryPath)
        {
            string rootPath = HttpContext.Current.Server.MapPath("~/");
            return directoryPath.ToLower().StartsWith(rootPath.ToLower());
        }
    }
}
