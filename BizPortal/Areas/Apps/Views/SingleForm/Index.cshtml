@using BizPortal.DAL.MongoDB
@using Resources = BizPortal.Resources
@using BizPortal.Utils.Helpers
@using BizPortal.ViewModels.ControlData;

@{
    ViewBag.Title = ResourceHelper.GetResourceWordWithDefault("PAGE_TITLE_SINGLE_FORM", "Apps_SingleForm", "PAGE_TITLE_SINGLE_FORM");
    Layout = "~/Areas/Apps/Views/Shared/_AppsLayoutV2.cshtml";

    Dictionary<string, object> defaults = ViewBag.Defaults;
    FormSectionGroup sectionGroup = ViewBag.SectionGroup;
    List<FormSectionGroup> allSectionGroups = ViewBag.AllSectionGroups;
    FormSection[] sections = ViewBag.Sections;
    FormSectionRow[] sectionRows = ViewBag.SectionRows;
    int numberOfApps = ViewBag.NumberOfApps;
    int currentApp = ViewBag.CurrentApp;
    List<string> allApps = ViewBag.AllApps;
    List<FormSectionGroup> allGroups = ViewBag.AllSectionGroups;

    Guid trid = ViewBag.TransactionId;
    var attachUrl = Url.ServiceAction("Attachment", "SingleForm", new { trid = trid }, true);
    string appHeader = sectionGroup.SectionGroup;
    bool IsDBDError = ViewBag.IsDBDError;
    string BackUrl = ViewBag.BackUrl;
    bool hasDupAddress = false;
    bool hasDupTitleDBD = false;
}

@helper GenerateAdditionalValidation(FormSectionRow[] secRows)
{
    List<string> allApps = ViewBag.AllApps;

    foreach (var row in secRows)
    {
        foreach (var ctrl in row.Controls)
        {
            if (ctrl.Rules != null && ctrl.Rules.Length > 0)
            {
                if (ctrl.Type == ControlType.CheckBoxWithDropdown)
                {
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.Required)
                        {
                            <text>
                                var checkboxRequired_@ctrl.DataKey = $('[data-checkbox-group=@ctrl.DataKey] :input[type=checkbox]:checked').length > 0 ? true : false;
                                if (!checkboxRequired_@ctrl.DataKey) {
                                $("[data-checkbox-group=@ctrl.DataKey]").before("<span class='text-danger custom-req-danger'>@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)))</span>");
                                errors++;
                                }
                            </text>
                        }
                    }
                }
                else if (ctrl.Type == ControlType.CheckBox || ctrl.Type == ControlType.CheckBoxWithText)
                {
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.Required)
                        {

                            if (ctrl.CheckboxConfigs != null)
                            {
                                <text>
                                    var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                    var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';
                                    var checkboxCheckedLength_@ctrl.DataKey = $(':input[type=checkbox][name^=@(ctrl.DataKey)_]:checked').length;

                                    @if (ctrl.CheckboxConfigs.CheckMin)
                                    {
                                        <text>
                                            var dataMin_@ctrl.DataKey = $(':input[type=checkbox][name^=@(ctrl.DataKey)_]').data('min');
                                            if (typeof dataMin_@ctrl.DataKey !== 'undefined') {
                                            if (!isDisabled_@ctrl.DataKey && checkboxCheckedLength_@ctrl.DataKey @Html.Raw("<") dataMin_@ctrl.DataKey) {
                                            $(":input[type=checkbox][name^=@(ctrl.DataKey)_]").parents('.form-group:first').find('label:first').after("<span class='text-danger custom-req-danger'>@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, string.Format(Resources.Apps_SingleForm.RULE_ERROR_MIN_CHECKED, ctrl.CheckboxConfigs.Min)))</span>");
                                            errors++;
                                            }
                                            }
                                        </text>
                                    }
                                    @if (ctrl.CheckboxConfigs.CheckMax)
                                    {
                                        <text>
                                            var dataMax_@ctrl.DataKey = $(':input[type=checkbox][name^=@(ctrl.DataKey)_]').data('max');
                                            if (typeof dataMax_@ctrl.DataKey !== 'undefined') {
                                            if (!isDisabled_@ctrl.DataKey && checkboxCheckedLength_@ctrl.DataKey @Html.Raw(">") dataMax_@ctrl.DataKey) {
                                            $(":input[type=checkbox][name^=@(ctrl.DataKey)_]").parents('.form-group:first').find('label:first').after("<span class='text-danger custom-req-danger'>@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, string.Format(Resources.Apps_SingleForm.RULE_ERROR_MAX_CHECKED, ctrl.CheckboxConfigs.Max)))</span>");
                                            errors++;
                                            }
                                            }
                                        </text>
                                    }
                                </text>
                            }
                            else
                            {
                                <text>
                                    var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                    var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';

                                    var checkboxRequired_@ctrl.DataKey = ($(':input[type=checkbox][name^=@(ctrl.DataKey)_]').hasClass('ignore') || $(':input[type=checkbox][name^=@(ctrl.DataKey)_]:checked').length > 0)  ? true : false;
                                    if (!isDisabled_@ctrl.DataKey && !checkboxRequired_@ctrl.DataKey) {
                                    $(":input[type=checkbox][name^=@(ctrl.DataKey)_]").parents('.form-group:first').find('label:first').after("<span class='text-danger custom-req-danger'>@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)))</span>");
                                    errors++;
                                    }
                                </text>
                            }
                        }
                    }
                }
                else if (ctrl.Type == ControlType.DatePicker)
                {
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.JSExpression && !string.IsNullOrEmpty(rule.JSExpression))
                        {
                            <text>
                                var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';
                                var isIgnored_@ctrl.DataKey = $('input[type=text][name^=@(ctrl.DataKey)]').hasClass('ignore');

                                if (!isDisabled_@ctrl.DataKey && !isIgnored_@ctrl.DataKey) {
                                var fnc = function() {
                                @Html.Raw(rule.JSExpression)
                                };

                                if (!fnc()) {
                                $('input[type=text][name^=@(ctrl.DataKey)]').parent().after("<span class='text-danger custom-req-danger'>@ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), rule.ErrorMessage)</span>");
                                errors++;
                                }
                                }
                            </text>
                        }
                    }
                }
                else if (ctrl.Type == ControlType.DateRangePicker)
                {
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.Required)
                        {
                            <text>
                                var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';
                                var isIgnored_DATE_FROM_@ctrl.DataKey = $('input[type=text][name^=DATE_FROM_@(ctrl.DataKey)]').hasClass('ignore');
                                var isIgnored_DATE_TO_@ctrl.DataKey = $('input[type=text][name^=DATE_TO_@(ctrl.DataKey)]').hasClass('ignore');

                                if (!isDisabled_@ctrl.DataKey && !isIgnored_DATE_FROM_@ctrl.DataKey && !isIgnored_DATE_TO_@ctrl.DataKey) {
                                var dateFrom = $('input[type=text][name^=DATE_FROM_@(ctrl.DataKey)]').val();
                                var dateTo = $('input[type=text][name^=DATE_TO_@(ctrl.DataKey)]').val();
                                if (!(dateFrom && dateTo)) {
                                $('input[type=text][name^=DATE_FROM_@(ctrl.DataKey)]').parent().after("<span class='text-danger custom-req-danger'>@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)))</span>");
                                errors++;
                                }
                                }

                            </text>
                        }
                    }
                }
                else if (ctrl.Type == ControlType.TextBox)
                {
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.RequiredEach)
                        {
                            <text>
                                var eachControl = [ "@ctrl.DataKey" ];
                            </text>
                            foreach (var name in rule.EachControl)
                            {
                                <text>
                                    eachControl.push("@name");
                                </text>
                            }
                            if (rule.DisableOnSpecificApps && rule.SpecificApps.Any(o => allApps.Contains(o)))
                            {
                                <text>
                                    if (eachControl.length > 0) {
                                    for (var i = 0; i < eachControl.length; i++) {
                                    var textboxReqEach = $.trim($('input[type=text][name=' + eachControl[i] + ']').val()).length > 0 ? true : false;
                                    if (!textboxReqEach) {
                                    errors++;
                                    $('input[type=text][name=' + eachControl[i] + ']').after("<span class='text-danger custom-req-danger'>@rule.SpecificAppErrorMessage</span>");
                                    }
                                    }
                                    }
                                </text>
                            }
                            else
                            {
                                <text>
                                    var eachControlCnt = 0;
                                    if (eachControl.length > 0) {
                                    for (var i = 0; i < eachControl.length; i++) {
                                    var textboxReqEach = $.trim($('input[type=text][name=' + eachControl[i] + ']').val()).length > 0 ? true : false;
                                    if (textboxReqEach) {
                                    eachControlCnt++;
                                    }
                                    }

                                    if (eachControlCnt <= 0) {
                                    $.each(eachControl, function (i, e) {
                                    $('input[type=text][name=' + e + ']').after("<span class='text-danger custom-req-danger'>@rule.ErrorMessage</span>");
                                    });
                                    errors++;
                                    }
                                    }
                                </text>
                            }
                        }
                        else if (rule.Type == ValidationType.JSExpression && !string.IsNullOrEmpty(rule.JSExpression))
                        {
                            if (ctrl.TextboxNumberSettings != null)
                            {
                                <text>
                                    var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                    var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';
                                    var isIgnored_@ctrl.DataKey = $('input[type=text][name^=@(ctrl.DataKey)]').hasClass('ignore');

                                    if (!isDisabled_@ctrl.DataKey && !isIgnored_@ctrl.DataKey) {
                                    var fnc = function() {
                                    @Html.Raw(rule.JSExpression)
                                    };

                                    if (!fnc()) {
                                    $('input[type=number][name^=@(ctrl.DataKey)]').after("<span class='text-danger custom-req-danger'>@ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), rule.ErrorMessage)</span>");
                                    errors++;
                                    }
                                    }
                                </text>
                            }
                            else
                            {
                                <text>
                                    var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                    var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';
                                    var isIgnored_@ctrl.DataKey = $('input[type=text][name^=@(ctrl.DataKey)]').hasClass('ignore');

                                    if (!isDisabled_@ctrl.DataKey && !isIgnored_@ctrl.DataKey) {
                                    var fnc = function() {
                                    @Html.Raw(rule.JSExpression)
                                    };

                                    if (!fnc()) {
                                    $('input[type=text][name^=@(ctrl.DataKey)]').after("<span class='text-danger custom-req-danger' id='jsex-msg-err_@ctrl.DataKey'>@ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), rule.ErrorMessage)</span>");
                                    errors++;
                                    }
                                    }
                                </text>
                            }
                        }
                        else if (rule.Type == ValidationType.Regex && !string.IsNullOrEmpty(rule.RegexFormat))
                        {
                            <text>
                                var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';
                                var isIgnored_@ctrl.DataKey = $('input[type=text][name^=@(ctrl.DataKey)]').hasClass('ignore');

                                if (!isDisabled_@ctrl.DataKey && !isIgnored_@ctrl.DataKey) {
                                var fnc = function() {
                                var str = $('input[type=text][name^=@(ctrl.DataKey)]').val();
                                var pattern = /@Html.Raw(rule.RegexFormat)/i;
                                // Validate only when control has value
                                return !str || pattern.test(str);
                                };

                                if (!fnc()) {
                                $('input[type=text][name^=@(ctrl.DataKey)]').after("<span class='text-danger custom-req-danger'>@ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), rule.ErrorMessage)</span>");
                                errors++;
                                }
                                }
                            </text>
                        }
                    }
                }
                else if (ctrl.Type == ControlType.DataTable)
                {
                    string datatableId = string.Format("{0}_DATATABLE", ctrl.DataKey);
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.Required)
                        {
                            <text>
                                var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                var ignored_@ctrl.DataKey = $('div#MODAL_@row.Section').find("input[name='@ctrl.DataKey']").hasClass('ignore');

                                if ($(divContainer_@ctrl.DataKey).attr('disabled') != 'disabled'
                                && !ignored_@ctrl.DataKey
                                && typeof @(datatableId)_validate == 'function' && typeof @(datatableId)_getData == 'function'
                                && (!@(datatableId)_validate() || @(datatableId)_getData().length == 0))
                                {
                                $("#@datatableId").before("<span class='text-danger custom-req-danger'>@ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), rule.ErrorMessage)</span>");
                                errors++;
                                }
                            </text>
                        }
                    }
                }
                else if (ctrl.Type == ControlType.Dropdown)
                {
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.JSExpression && !string.IsNullOrEmpty(rule.JSExpression))
                        {
                            <text>
                                var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';
                                var isIgnored_@ctrl.DataKey = $('select[name=DROPDOWN_@(ctrl.DataKey)]').hasClass('ignore');

                                if (!isDisabled_@ctrl.DataKey && !isIgnored_@ctrl.DataKey) {
                                var fnc = function() {
                                @Html.Raw(rule.JSExpression)
                                };

                                if (!fnc()) {
                                $('select[name=DROPDOWN_@(ctrl.DataKey)]').next('span').after("<span class='text-danger custom-req-danger'>@ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), rule.ErrorMessage)</span>");
                                errors++;
                                }
                                }
                            </text>
                        }
                    }
                }
                else if (ctrl.Type == ControlType.RadioGroup)
                {
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.JSExpression && !string.IsNullOrEmpty(rule.JSExpression))
                        {
                            <text>
                                var divContainer_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                var isDisabled_@ctrl.DataKey = $(divContainer_@ctrl.DataKey).attr('disabled') == 'disabled';
                                var isIgnored_@ctrl.DataKey = $('input[type=radio][name^=@(ctrl.DataKey)]').hasClass('ignore');

                                if (!isDisabled_@ctrl.DataKey && !isIgnored_@ctrl.DataKey) {
                                var fnc = function() {
                                @Html.Raw(rule.JSExpression)
                                };

                                if (!fnc()) {
                                $('input[type=radio][name^=@(ctrl.DataKey)]').parents('.form-group').append("<span class='text-danger custom-req-danger'>@ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), rule.ErrorMessage)</span>");
                                errors++;
                                }
                                }
                            </text>
                        }
                    }
                }
                else if ((ctrl.Type == ControlType.AddressForm || ctrl.Type == ControlType.AddressFormEN) && ctrl.Rules != null)
                {
                    foreach (var rule in ctrl.Rules)
                    {
                        if (rule.Type == ValidationType.Required)
                        {
                            if (ctrl.AddressForm_ShowEmailControl)
                            {
                                // Validate email in address control
                                string emailCtrlName = string.Format("{0}_{1}", "ADDRESS_EMAIL", ctrl.DataKey);
                                string emailPattern = RegexPatternConst.JS_EMAIL_VALIDATOR_PATTERN;
                                <text>
                                    var divContainerEmail_@ctrl.DataKey = $("section[data-section-name='@row.Section']").parent('div');
                                    var isDisabledEmail_@ctrl.DataKey = $(divContainerEmail_@ctrl.DataKey).attr('disabled') == 'disabled';
                                    var isIgnoredEmail_@ctrl.DataKey = $("input[type='text'][name='@emailCtrlName']").hasClass('ignore');

                                    if (!isDisabledEmail_@ctrl.DataKey && !isIgnoredEmail_@ctrl.DataKey) {
                                    var fnc = function() {
                                    var email = $("input[name='@emailCtrlName']").val();

                                    if (email.length > 0) {
                                    var re = @Html.Raw(emailPattern);
                                    return re.test(String(email).toLowerCase());
                                    }
                                    return true;
                                    };

                                    if (!fnc()) {
                                    $('input[name="@emailCtrlName"]').parent().append("<span class='text-danger custom-req-danger'>@ResourceHelper.GetResourceWordWithDefault("RULE_ERROR_EMAIL", StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), "RULE_ERROR_EMAIL")</span>");
                                    errors++;
                                    }
                                    }
                                </text>
                            }
                        }
                    }
                }
            }
        }
    }
}

<div class="sw-main sw-theme-circles">
    <ul class="nav nav-tabs step-anchor">
        <li class="active"><a>1</a><label>กรอกแบบฟอร์ม</label></li>
        <li><a>2</a><label>อัปโหลดเอกสาร</label></li>
        <li><a>3</a><label>ยืนยันความถูกต้อง</label></li>
    </ul>
</div>

<script type="text/javascript">
    @* Frontis: Store controls that need to be triggered when data was changed. *@
    var triggerCtrlList = [];

    @* Frontis: Store original data loaded from server of each ArrayOfForm. *@
    var originalArrayOfFormDataList = [];

    @* Frontis: Setup common configurations to be used in .js files. *@
    window.sharedConfig = {
        baseUrl: '@(new Uri(Request.Url, Url.Content("~/")))'
    };
</script>

<div class="text-center"><h4 class="single-form-app-section-group">@string.Format("1.{0} {1}", currentApp, ResourceHelper.GetResourceWordWithDefault(appHeader, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm_SectionGroup"), appHeader))</h4></div>
<form id="frmSingleForm" method="post" action="@Url.Content("~/Api/V2/SingleForm/Requests")?language=@ViewBag.CurrentLang">
    <input type="hidden" name="TransactionID" value="@trid.ToString()" />
    <input type="hidden" name="appStep" value="@ViewBag.CurrentApp" />
    <input type="hidden" name="businessId" value="@ViewBag.BusinessId" />
    <div class="single-form">
        <div class="row">
            <div class="col-md-9">
                @{
                    var orderedSec = sections.Where(o => o.AdditionalSection == null || (o.AdditionalSection != null && !o.AdditionalSection.ShowOnTrackingPage)).OrderBy(o => o.Ordering).ToList();
                }
                @for (var i = 0; i < orderedSec.Count; i++)
                {
                    var sectionEmpty = false;
                    var sec = orderedSec[i];
                    var secRows = sectionRows.Where(o => o.Section == sec.Section).OrderBy(o => o.RowNumber).ToArray();

                    bool existingINFORMATION_STORE = secRows.Any(o => o.Section.Equals("INFORMATION_STORE"));
                    bool existingGENERAL_INFORMATION = secRows.Any(o => o.Section.Equals("GENERAL_INFORMATION"));

                    if (existingINFORMATION_STORE)
                    {
                        bool findAddressBKK = false;
                        bool findAddressAll = false;
                        foreach (var row in secRows)
                        {
                            foreach (var ctrl in row.Controls)
                            {
                                if (ctrl.Control.Equals("INFORMATION_STORE__ADDRESS"))
                                {

                                    System.Reflection.PropertyInfo prop = ctrl.GetType().GetProperty("AddressForm_ProvinceType", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
                                    object propVal = prop.GetValue((object)ctrl, null);
                                    ProvinceType propProvinceTypeVal = (ProvinceType)Enum.Parse(typeof(ProvinceType), propVal.ToString());
                                    if (propProvinceTypeVal == ProvinceType.All)
                                    {
                                        findAddressAll = true;
                                    }
                                    else if (propProvinceTypeVal == ProvinceType.BKK)
                                    {
                                        findAddressBKK = true;
                                    }
                                    if (findAddressAll & findAddressBKK)
                                    {
                                        hasDupAddress = true;
                                        break;
                                    }
                                }
                            }
                            if (hasDupAddress) { break; }
                        }
                    }

                    if (existingGENERAL_INFORMATION)
                    {
                        bool foundTitleDBD = false;
                        bool foundTitleBiz = false;

                        foreach (var row in secRows)
                        {
                            foreach (var ctrl in row.Controls)
                            {
                                if (ctrl.Control.Equals("CITIZEN_TITLE"))
                                {
                                    System.Reflection.PropertyInfo prop = ctrl.GetType().GetProperty("AjaxUrl", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
                                    object propVal = prop.GetValue((object)ctrl, null);
                                    string propTitleDBD = propVal == null ? string.Empty : propVal.ToString();
                                    if (!propTitleDBD.Equals(string.Empty))
                                    {
                                        foundTitleDBD = true;
                                    }
                                    else if (propTitleDBD.Equals(string.Empty))
                                    {
                                        foundTitleBiz = true;
                                    }
                                    if (foundTitleBiz & foundTitleDBD)
                                    {
                                        hasDupTitleDBD = true;
                                        break;
                                    }
                                }
                            }
                            if (hasDupTitleDBD) { break; }
                        }
                    }

                    if (secRows.Length == 0)
                    {
                        sectionEmpty = true;
                        for (var j = i + 1; j < orderedSec.Count; j++)
                        {
                            var nextSec = orderedSec[j];
                            if (!nextSec.HideSectionHeader)
                            {
                                break;
                            }
                            else
                            {
                                if (sectionRows.Where(o => o.Section == nextSec.Section).Count() > 0)
                                {
                                    // Not empty
                                    sectionEmpty = false;
                                    break;
                                }
                            }
                        }
                    }

                    if (!sectionEmpty || sec.IsPartialView)
                    {
                        var templateName = sec.TemplateName != null ? sec.TemplateName : sec.Section;
                        var sectionAttr = DisplayConditionHelper.GetAttributes(sec);
                        var sectionDisableAttr = DisableConditionHelper.GetAttributes(sec);
                        if (sec.Type == SectionType.Form)
                        {
                            <div class="row mt20 @sectionAttr.Class @sectionDisableAttr.Class"
                                 style="@sectionAttr.Style"
                                 data-disable-condition="@sectionDisableAttr.Data"
                                 data-display-condition="@sectionAttr.Data">

                                <section data-section-name="@sec.Section" class="col-md-12">

                                    @if (!sec.NoHeader)
                        {
                                        <h5 style="line-height: 40px; @(sec.HideSectionHeader ? "display: none;":"")">
                                            @Html.Raw(ResourceHelper.GetResourceWordWithDefault(templateName, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm"), templateName))
                                            @if (!sec.Info.IsEmpty())
                                            {
                                                <a href="#" class="form-info" data-target="info-@sec.Id">
                                                    <i class="fa fa-info-circle"></i>
                                                </a>
                                            }
                                        </h5>
                                        <hr style="@(sec.HideSectionHeader ? "display: none;":"")" />
                                        if (!sec.Info.IsEmpty())
                                        {
                                            <div class="form-control-info" id="info-@sec.Id" style="@(sec.DefaultShowInfo ? "" : "display:none");top: -11px">
                                                <a href="#" class="form-control-info-close" data-target="info-@sec.Id"><i class="fa fa-times-circle"></i></a>
                                                <div class="row">
                                                    <div class="M-12">@Html.Raw(ResourceHelper.GetResourceWordWithDefault(sec.Info, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm"), sec.Info))</div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    @if (sec.IsPartialView)
                                    {
                    sec.PartialReadonly = false;
                    sec.PartialApps = allApps.ToArray();
                                        <div class="row">
                                            @{ Html.RenderPartial("~/Areas/Apps/Views/Shared/PartialForms/_" + sec.Section + "_Form.cshtml", sec); }
                                        </div>
                                    }
                                    else
                {
                    foreach (var row in secRows)
                    {
                        var cols = row.Controls.Count();
                        double maxCols = 12;
                        int colLen = (int)Math.Ceiling(maxCols / cols);
                        var rowAttr = DisplayConditionHelper.GetAttributes(row);
                                            <div class="row @rowAttr.Class"
                                                 style="@rowAttr.Style"
                                                 data-display-condition="@rowAttr.Data">
                                                @foreach (var ctrl in row.Controls.Where(o => o.AdditionalData == null || (o.AdditionalData != null && !o.AdditionalData.ShowOnTrackingPage)))
                                                {
                                                    if (ctrl.Type == ControlType.AddressForm & hasDupAddress)
                                                    {
                                                        if (ctrl.Control.Equals("INFORMATION_STORE__ADDRESS") & ctrl.AddressForm_ProvinceType == ProvinceType.All)
                                                        {
                                                            colLen = 12;
                                                            continue;
                                                        }
                                                    }

                                                    if (ctrl.Type == ControlType.Dropdown && hasDupTitleDBD)
                                                    {
                                                        if (ctrl.Control.Equals("CITIZEN_TITLE") && ctrl.AjaxUrl == null)
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    ctrl.IdentityTypes = new UserTypeEnum[] { ViewBag.IdentityType };
                                                    if (ctrl.IsNotDisplayControl == true)
                                                    {
                                                        continue;
                                                    }
                                                    ctrl.ClientID = string.Format("{0}-{1}", ctrl.DataKey, DateTime.Now.Ticks);
                                                    ctrl.ValidateNeeded = ctrl.Rules != null && ctrl.Rules.Length > 0;
                                                    var key = sec.Section + "::" + ctrl.DataKey;
                                                    key = defaults.ContainsKey(key) ? key : ctrl.DataKey;
                                                    if (defaults.ContainsKey(key))
                                                    {
                                                        var data = defaults[key];
                                                        if (data != null && (data.GetType() != typeof(string) || (data.GetType() == typeof(string) && !string.IsNullOrEmpty(data.ToString()))))
                                                        {
                                                            ctrl.Data = defaults[key];
                                                        }
                                                    }

                                                    if (ctrl.Type == ControlType.AjaxStaticControl && ctrl.IsUtilDataNeeded && defaults.ContainsKey("UtilData"))
                                                    {
                                                        var utilData = defaults["UtilData"];
                                                        if (utilData != null)
                                                        {
                                                            ctrl.Data = utilData;
                                                        }
                                                    }

                                                    if (ctrl.ColFixed > 0 && ctrl.ColFixed <= 12)
                                                    {
                                                        colLen = ctrl.ColFixed;
                                                    }

                                                    if (ctrl.Type == ControlType.Hidden)
                                                    {
                                                        <text>
                                                            <script type="text/javascript">
                                                            triggerCtrlList.push('@ctrl.DataKey');
                                                            </script>
                                                        </text>
                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_HiddenControl.cshtml", ctrl);
                    }
                    else
                    {
                        var addClass = ctrl.IsCustomClass ? ctrl.CustomClassName : string.Empty;
                        var ctrlAttr = DisplayConditionHelper.GetAttributes(ctrl);

                                                        <div class="col-md-@colLen form-group @addClass @ctrlAttr.Class"
                                                             style="@ctrlAttr.Style"
                                                             data-display-condition="@ctrlAttr.Data">
                                                            @if (ctrl.Control != "TOT_BRANCH" && !ctrl.HideLabel &&
                                                            ((ctrl.Type != ControlType.AddressForm && ctrl.Type != ControlType.AddressFormEN && ctrl.Type != ControlType.ChainedDropdown) ||
                                                            (ctrl.Type == ControlType.AddressForm && ctrl.Type == ControlType.AddressFormEN && ctrl.DisplayStaticIfHasData)))
                                                            {
                    if (ctrl.Type == ControlType.Heading)
                    {
                                                                    <label>
                                                                        @ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)
                                                                        @if (!ctrl.Info.IsEmpty())
                                                                        {
                                                                            <a href="#" class="form-info" data-target="info-@ctrl.ClientID">
                                                                                <i class="fa fa-info-circle"></i>
                                                                            </a>
                                                                        }
                                                                    </label>
                                                                }
                                                                else if (ctrl.Type == ControlType.Signature)
                {
                    Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_SignatureControl.cshtml", ctrl);
                }
                else
                {
                                                                    <label>
                                                                        @ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)
                                                                        @if (ctrl.Rules != null && ctrl.Rules.Where(x => x.Type == ValidationType.Required).Count() > 0)
                                                                        {
                                                                            <text>*</text>
                                                                        }
                    @if (!ctrl.Info.IsEmpty())
                                                                        {
                                                                            <a href="#" class="form-info" data-target="info-@ctrl.ClientID">
                                                                                <i class="fa fa-info-circle"></i>
                                                                            </a>
                                                                        }
                                                                        @if (ctrl.Control.Equals("INFORMATION_STORE_NAME_TH_CUSTOM"))
                                                                        {
                                                                            <a href="#" class="form-info" data-toggle="modal" data-target="#infoModalCustom">
                                                                                <i class="fa fa-info-circle"></i>
                                                                            </a>
                                                                        }
                                                                        :
                                                                    </label>
                                                                }

                                                                if (!ctrl.Info.IsEmpty())
                {
                                                                    <div class="form-control-info" id="info-@ctrl.ClientID" style="@(ctrl.DefaultShowInfo ? "" : "display:none")">
                                                                        <a href="#" class="form-control-info-close" data-target="info-@ctrl.ClientID"><i class="fa fa-times-circle"></i></a>
                                                                        <div class="row">
                                                                            <div class="M-12">@Html.Raw(ResourceHelper.GetResourceWordWithDefault(ctrl.Info, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Info))</div>
                                                                        </div>
                                                                    </div>
                                                                }
                                                            }

                                                            @if (ctrl.DisplayStaticIfHasData && ctrl.Data != null)
                                                            {
                    ctrl.ValidateNeeded = false; // Already has data, No need to validate
                    Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_StaticControl.cshtml", ctrl);
                }
                                                            else if (ctrl.Type == ControlType.AjaxStaticControl && ctrl.IsUtilDataNeeded && ctrl.Data != null)
                {
                    Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AjaxStaticControl.cshtml", ctrl);
                }
                else
                {
                    // Cache controls to be fired when data loaded.
                    if ((ctrl.Type == ControlType.DatePicker && ctrl.IsShowAge)
                        || ctrl.Type == ControlType.DataTable
                        || ctrl.Type == ControlType.DataLabel
                        || ctrl.Type == ControlType.Hidden)
                    {
                                                                    <text>
                                                                        <script type="text/javascript">
                                                                        triggerCtrlList.push('@ctrl.DataKey');
                                                                        </script>
                                                                    </text>
                                                                }

                                                                @* Switch Controls *@
                                                                switch (ctrl.Type)
                                                                {
                                                                    case ControlType.BKKBuildingFormFooter:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_BKKBuildingFormFooter.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.BKKBuildingNoteFooter:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_BKKBuildingNoteFooter.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.BKKBuildingRenewFormFooter:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_BKKBuildingRenewFormFooter.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.OCPBFormFooter:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_OCPBFormFooter.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignature:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureEDIT:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureEDITControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureAnimal:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureAnimalControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureFood:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFoodControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureDangerFood:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureDangerFoodControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureFoodEdit:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFoodEditControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureFoodLicense:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFoodLicenseControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureBoard:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureBoardControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureFoodRenew:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFoodRenewControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureBuilding:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureBuildingControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureBuildingOwn:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureBuildingOwnControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.AnimalMedFormFooter:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AnimalMedFormFooterControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.TextBox:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_TextBoxControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.Label:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_LabelControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.DataLabel:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DataLabelControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.Number:
                                                                        break;
                                                                    case ControlType.DatePicker:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DatePickerControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.DateRangePicker:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DateRangePickerControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.Email:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_EmailControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.CheckBox:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_CheckBoxControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.Dropdown:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DropdownControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.MultipleDropdown:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_MultipleDropdownControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ChainedDropdown:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ChainedDropdownControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.Chained5Dropdown:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_Chained5DropdownControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.GeoDropdown:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_GeoDropdownControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.RadioGroup:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_RadioGroupControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.RadioGroupWithText:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_RadioGroupWithTextControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.RadioGroupWithDropdown:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_RadioGroupWithDropdownControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.RadioGroupWithDropdownETC:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_RadioGroupWithDropdownETCControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.CheckBoxWithDropdown:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_CheckBoxWithDropdownControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.CheckBoxWithText:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_CheckBoxWithTextControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.AddressForm:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AddressFormControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.AddressFormEN:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AddressFormENControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.AjaxStaticControl:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AjaxStaticControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.Signature:
                                                                        break;
                                                                    case ControlType.Heading:
                                                                        break;
                                                                    case ControlType.None:
                                                                        break;
                                                                    case ControlType.Literal:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_LiteralControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.DataTable:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DataTableControl.cshtml", ctrl);
                                                                        break;
                                                                    //case ControlType.Hidden:
                                                                    //    Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_HiddenControl.cshtml", ctrl);
                                                                    //    break;
                                                                    case ControlType.ConfirmSignatureFactoryClass2New:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFactoryClass2NewControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureFactoryClass2Edit:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFactoryClass2EditControl.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.ConfirmSignatureFactoryType2:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFactoryType2Control.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.Confirm_SEC_NEW_A:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignature_SEC_NEW_A.cshtml", ctrl);
                                                                        break;
                                                                    case ControlType.Confirm_SEC_EDIT:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureControl_APP_SEC_EDIT.cshtml", ctrl);
                                                                        break;
                                                                    default:
                                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_StaticControl.cshtml", ctrl);
                                                                        break;
                                                                }
                                                            }
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    }
                                </section>
                            </div>
                        }
                        else if (sec.Type == SectionType.ArrayOfForms)
                        {
                            <div class="row mt20 mb20 @sectionAttr.Class @sectionDisableAttr.Class"
                                 style="@sectionAttr.Style"
                                 data-disable-condition="@sectionDisableAttr.Data"
                                 data-display-condition="@sectionAttr.Data">
                                <section data-section-name="@sec.Section" class="col-md-12">

                                    @if (!sec.NoHeader)
                                    {
                                        <h5 style="line-height: 40px; @(sec.HideSectionHeader ? "display: none;":"")">
                                            @ResourceHelper.GetResourceWordWithDefault(templateName, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm"), templateName)
                                            @if (!sec.Info.IsEmpty())
                                            {
                                                <a href="#" class="form-info" data-target="info-@sec.Id">
                                                    <i class="fa fa-info-circle"></i>
                                                </a>
                                            }
                                        </h5>
                                        <hr style="@(sec.HideSectionHeader ? "display: none;":"")" />
                                        if (!sec.Info.IsEmpty())
                                        {
                                            <div class="form-control-info" id="info-@sec.Id" style="@(sec.DefaultShowInfo ? "" : "display:none");top: -11px">
                                                <a href="#" class="form-control-info-close" data-target="info-@sec.Id"><i class="fa fa-times-circle"></i></a>
                                                <div class="row">
                                                    <div class="M-12">@Html.Raw(ResourceHelper.GetResourceWordWithDefault(sec.Info, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm"), sec.Info))</div>
                                                </div>
                                            </div>
                                        }
                                    }

                                    @if (sec.ArrayOfFormNotice != null)
                                    {
                                        <span>@ResourceHelper.GetResourceWordWithDefault(sec.ArrayOfFormNotice, "Apps_SingleForm_Template", sec.ArrayOfFormNotice)</span>
                                    }
                                    <div class="row">
                                        <div class="col-md-12 form-group">
                                            <div id="insert_@sec.Section"></div>
                                            @Html.Partial("~/Areas/Apps/Views/Shared/Templates/_" + templateName + "Template.cshtml", sec)
                                        </div>
                                    </div>
                                    @if (!sec.DisableAddRemoveItem)
                                    {
                                        <div class="row">
                                            <div class="col-md-12 form-group text-center">
                                                <button type="button" class="btn btn-primary"
                                                        onclick="javascript: $(document).trigger('@sec.Section-modal-databound', ['@sec.Section', null, window.singleForm.variables['arrObj' + '@sec.Section'].data, 'ADD']); $(document).trigger('allSections-modal-databound', ['@sec.Section', null, window.singleForm.variables['arrObj' + '@sec.Section'].data, 'ADD']); return true;"
                                                        data-toggle="modal"
                                                        data-target="@string.Format("#MODAL_{0}", sec.Section)"
                                                        data-backdrop="static" style="width: 100%;">
                                                    @ResourceHelper.GetResourceWordWithDefault(sec.AddButtonText, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm_Template"), sec.AddButtonText)
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </section>
                            </div>
                        }
                    }
                }
            </div>
            <div class="hidden-xs hidden-sm col-md-3" id="singleformOverview">
                @{ var appIdx = 1; }
                @foreach (var secGroup in allSectionGroups)
                {
                    <div class="row">
                        <section class="col-md-12">
                            @if (sectionGroup.SectionGroup == secGroup.SectionGroup)
                            {
                                <span class="bold text-colored">1.@appIdx @ResourceHelper.GetResourceWordWithDefault(secGroup.SectionGroup, StringHelper.DefaultIfEmpty(secGroup.ResourceName, "Apps_SingleForm_SectionGroup"), secGroup.SectionGroup)</span>
                                <i class="fa fa-chevron-circle-left text-colored" aria-hidden="true" style="font-size:0.8em;"></i>
                            }
                            else
                            {
                                <span>1.@appIdx @ResourceHelper.GetResourceWordWithDefault(secGroup.SectionGroup, StringHelper.DefaultIfEmpty(secGroup.ResourceName, "Apps_SingleForm_SectionGroup"), secGroup.SectionGroup)</span>
                            }

                        </section>
                    </div>
                    appIdx++;
                }

                @*@foreach (var sec in sections)
                    {
                    <div class="row">
                        <section data-section-overview="@sec.Section" class="col-md-12 mb10">
                            @if (sec.Type == SectionType.Form)
                            {
                            <label name="allRequiredPercentage">@ResourceHelper.GetResourceWordWithDefault(sec.Section, "Apps_SingleForm", sec.Section) : <span></span>%</label>
                            <div class="progress" style="margin: 0;">
                                <div class="progress-bar progress-bar-danger progress-bar-striped active" role="progressbar"
                                     aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%"></div>
                            </div>
                            <div name="allRequiredRemain" class="text-danger" style="margin-bottom: 10px;" hidden>Required Remaining: <span></span></div>
                            }
                            else
                            {
                            <label>@ResourceHelper.GetResourceWordWithDefault(sec.Section, "Apps_SingleForm", sec.Section)</label>
                            if (sec.ArrayRequiredAtLeast)
                            {
                            <div class="text-warning">ต้องการข้อมูลอย่างน้อย @sec.NumberRequiredAtLeast ข้อมูล</div>
                            }
                            else
                            {
                            <div class="text-warning">Optional</div>
                            }
                            }
                        </section>
                    </div>
                    }*@
            </div>
        </div>

        <div class="row mt10 mb20">
            <div class="col-md-12 text-center single-form-footer-btn">
                <input type="hidden" id="Status" name="Status" value="@ApplicationStatusV2Enum.DRAFT.ToString()" />
                <input type="hidden" id="IsNextApp" name="IsNextApp" value="false" />
                @if (ViewBag.FromDB)
                {
                    if (currentApp == 1)
                    {
                        <a href="@Url.ServiceAction("Dashboard", "Track", new { area = ""})"
                           class="btn btn-default">@Html.Raw(Resources.Apps_SingleForm.BTN_BACK)</a>
                    }
                    else
                    {
                        <a href="@Url.ServiceAction("Index", "SingleForm", new { area = "Apps", trid = trid.ToString(), app = currentApp - 1, fromDB = true }, true)"
                           class="btn btn-default">@Html.Raw(Resources.Apps_SingleForm.BTN_BACK)</a>
                    }
                }
                else
                {
                    if (currentApp == 1)
                    {
                        <a href="@Url.BizAction("PermitList", "Business", new { area = "" })" class="btn btn-default">@Html.Raw(Resources.Apps_SingleForm.BTN_BACK)</a>
                        //<button type="button" id="btnBackSingleForm" class="btn btn-default" onclick="history.back()">@Html.Raw(Resources.Apps_SingleForm.BTN_BACK)</button>
                    }
                    else
                    {
                        <a href="@Url.ServiceAction("Index", "SingleForm", new { area = "Apps", trid = trid.ToString(), app = currentApp - 1}, true)" class="btn btn-default">@Html.Raw(Resources.Apps_SingleForm.BTN_BACK)</a>
                    }
                }
                <button type="submit" id="btnSaveDraftSingleForm" class="btn btn-default" onclick="$(singleForm.controls.formStatus).val('@ApplicationStatusV2Enum.DRAFT.ToString()'); $(singleForm.controls.formNextApp).val('false')">@Html.Raw(Resources.Apps_SingleForm.BTN_SAVE_DRAFT)</button>
                @if (ViewBag.EditMode || currentApp == numberOfApps)
                {
                    <button type="submit" id="btnSubmitSingleForm" class="btn btn-success" onclick="$(singleForm.controls.formStatus).val('@ApplicationStatusV2Enum.WAITING.ToString()')">
                        @Html.Raw(Resources.Apps_SingleForm.BTN_SUBMIT_FORM)
                    </button>
                }
                else if (currentApp < numberOfApps)
                {
                    <button type="submit" id="btnNextAppSingleForm" class="btn btn-success" onclick="$(singleForm.controls.formStatus).val('@ApplicationStatusV2Enum.WAITING.ToString()'); $(singleForm.controls.formNextApp).val('true')">
                        @*@Html.Raw(string.Format(Resources.Apps_SingleForm.BTN_NEXT, ResourceHelper.GetResourceWordWithDefault(allSectionGroups[currentApp].SectionGroup, "Apps_SingleForm_SectionGroup", allSectionGroups[currentApp].SectionGroup)))*@
                        @Html.Raw(Resources.Global.BTN_NEXT)
                    </button>
                }
            </div>
        </div>
    </div>
</form>

@* Modals *@
@foreach (var sec in sections.Where(o => o.Type == SectionType.ArrayOfForms))
{
    var templateName = sec.TemplateName != null ? sec.TemplateName : sec.Section;
    var secRows = sectionRows.Where(o => o.Section == sec.Section).OrderBy(o => o.RowNumber).ToArray();
    <form id="@string.Format("frm{0}", sec.Section)" method="post">
        <div class="modal single-form-modal fade" id="@string.Format("{0}_{1}", "MODAL", sec.Section)" aria-labelledby="@string.Format("MODAL_LABEL_{0}", sec.Section)">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title" id="@string.Format("MODAL_LABEL_{0}", sec.Section)">@ResourceHelper.GetResourceWordWithDefault(templateName, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm"), templateName)</h4>
                    </div>
                    @if (sec.IsPartialView)
                    {
                        sec.PartialApps = allApps.ToArray();
                        <div class="modal-body">
                            <div class="row">
                                @{ Html.RenderPartial("~/Areas/Apps/Views/Shared/PartialModals/_" + sec.Section + "_Modal.cshtml", sec); }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-12 form-group">
                                    @foreach (var row in secRows)
                                    {
                                        var rowAttr = DisplayConditionHelper.GetAttributes(row);
                                        var cols = row.Controls.Count();
                                        double maxCols = 12;
                                        int colLen = (int)Math.Ceiling(maxCols / cols);

                                        <div class="row @rowAttr.Class"
                                             style="@rowAttr.Style"
                                             data-display-condition="@rowAttr.Data">

                                            @foreach (var ctrl in row.Controls)
                                            {
                                                ctrl.ClientID = string.Format("{0}-{1}", ctrl.DataKey, DateTime.Now.Ticks);
                                                ctrl.ValidateNeeded = ctrl.Rules != null && ctrl.Rules.Length > 0;
                                                var key = sec.Section + "::" + ctrl.DataKey;
                                                key = defaults.ContainsKey(key) ? key : ctrl.DataKey;
                                                if (defaults.ContainsKey(key))
                                                {
                                                    var data = defaults[key];
                                                    if (data != null && (data.GetType() != typeof(string) || (data.GetType() == typeof(string) && !string.IsNullOrEmpty(data.ToString()))))
                                                    {
                                                        ctrl.Data = defaults[key];
                                                    }
                                                }

                                                if (ctrl.IsUtilDataNeeded)
                                                {
                                                    var utilData = defaults["UtilData"];
                                                    if (utilData != null)
                                                    {
                                                        ctrl.Data = utilData;
                                                    }
                                                }

                                                if (ctrl.ColFixed > 0 && ctrl.ColFixed <= 12)
                                                {
                                                    colLen = ctrl.ColFixed;
                                                }
                                                var ctrlAttr = DisplayConditionHelper.GetAttributes(ctrl);
                                                var addClass = ctrl.IsCustomClass ? ctrl.CustomClassName : string.Empty;

                                                <div class="col-md-@colLen form-group @addClass @ctrlAttr.Class"
                                                     style="@ctrlAttr.Style"
                                                     data-display-condition="@ctrlAttr.Data">
                                                    @if (!ctrl.HideLabel && (ctrl.Type != ControlType.AddressForm && ctrl.Type != ControlType.ChainedDropdown) || (ctrl.Type == ControlType.AddressForm && ctrl.DisplayStaticIfHasData))
                                                    {
                                                        if (ctrl.Type == ControlType.Heading)
                                                        {
                                                            <label>@ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)</label>
                                                        }
                                                        else if (ctrl.Type == ControlType.Signature)
                                                        {
                                                            Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_SignatureControl.cshtml", ctrl);
                                                        }
                                                        else
                                                        {
                                                            <label>
                                                                @ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)
                                                                @if (ctrl.Rules != null && ctrl.Rules.Where(x => x.Type == ValidationType.Required).Count() > 0)
                                                                {
                                                                    <text>*</text>
                                                                }
                                                                @if (!ctrl.Info.IsEmpty())
                                                                {
                                                                    <a href="#" class="form-info" data-target="info-@ctrl.ClientID">
                                                                        <i class="fa fa-info-circle"></i>
                                                                    </a>
                                                                } :
                                                            </label>
                                                            if (!ctrl.Info.IsEmpty())
                                                            {
                                                                <div class="form-control-info" id="info-@ctrl.ClientID" style="@(ctrl.DefaultShowInfo ? "" : "display:none")">
                                                                    <a href="#" class="form-control-info-close" data-target="info-@ctrl.ClientID"><i class="fa fa-times-circle"></i></a>
                                                                    <div class="row">
                                                                        <div class="M-12">@Html.Raw(ResourceHelper.GetResourceWordWithDefault(ctrl.Info, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Info))</div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    }

                                                    @if (ctrl.DisplayStaticIfHasData && ctrl.Data != null)
                                                    {
                                                        ctrl.ValidateNeeded = false; // Already has data, No need to validate
                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_StaticControl.cshtml", ctrl);
                                                    }
                                                    else if (ctrl.Type == ControlType.AjaxStaticControl && ctrl.IsUtilDataNeeded && ctrl.Data != null)
                                                    {
                                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AjaxStaticControl.cshtml", ctrl);
                                                    }
                                                    else
                                                    {
                                                        // Cache controls to be fired when data loaded.
                                                        if ((ctrl.Type == ControlType.DatePicker && ctrl.IsShowAge)
                                                            || ctrl.Type == ControlType.DataTable)
                                                        {
                                                            <text>
                                                                <script type="text/javascript">
		                                                        triggerCtrlList.push('@ctrl.DataKey');
                                                                </script>
                                                            </text>
                                                        }

                                                        @* Switch Controls *@
                                                        switch (ctrl.Type)
                                                        {
                                                            case ControlType.BKKBuildingFormFooter:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_BKKBuildingFormFooter.cshtml", ctrl);
                                                                break;
                                                            case ControlType.BKKBuildingNoteFooter:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_BKKBuildingNoteFooter.cshtml", ctrl);
                                                                break;
                                                            case ControlType.BKKBuildingRenewFormFooter:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_BKKBuildingRenewFormFooter.cshtml", ctrl);
                                                                break;
                                                            case ControlType.OCPBFormFooter:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_OCPBFormFooter.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignature:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureEDIT:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureEDITControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureAnimal:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureAnimalControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureFood:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFoodControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureDangerFood:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureDangerFoodControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureFoodEdit:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFoodEditControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureFoodLicense:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFoodLicenseControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureBoard:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureBoardControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureFoodRenew:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFoodRenewControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureBuilding:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureControlBuilding.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureBuildingOwn:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureControlBuildingOwn.cshtml", ctrl);
                                                                break;
                                                            case ControlType.TextBox:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_TextBoxControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Label:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_LabelControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Number:
                                                                break;
                                                            case ControlType.DatePicker:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DatePickerControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.DateRangePicker:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DateRangePickerControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Email:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_EmailControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.CheckBox:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_CheckBoxControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Dropdown:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DropdownControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.MultipleDropdown:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_MultipleDropdownControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ChainedDropdown:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ChainedDropdownControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Chained5Dropdown:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_Chained5DropdownControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.GeoDropdown:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_GeoDropdownControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.RadioGroup:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_RadioGroupControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.RadioGroupWithText:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_RadioGroupWithTextControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.RadioGroupWithDropdown:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_RadioGroupWithDropdownControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.RadioGroupWithDropdownETC:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_RadioGroupWithDropdownETCControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.CheckBoxWithDropdown:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_CheckBoxWithDropdownControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.CheckBoxWithText:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_CheckBoxWithTextControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.AddressForm:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AddressFormControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.AddressFormEN:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AddressFormENControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.AjaxStaticControl:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_AjaxStaticControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Literal:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_LiteralControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.DataTable:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_DataTableControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Hidden:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_HiddenControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Signature:
                                                                break;
                                                            case ControlType.Heading:
                                                                break;
                                                            case ControlType.None:
                                                                break;
                                                            case ControlType.ConfirmSignatureFactoryClass2New:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFactoryClass2NewControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.ConfirmSignatureFactoryClass2Edit:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignatureFactoryClass2EditControl.cshtml", ctrl);
                                                                break;
                                                            case ControlType.Confirm_SEC_NEW_A:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_ConfirmSignature_SEC_NEW_A.cshtml", ctrl);
                                                                break;
                                                            default:
                                                                Html.RenderPartial("~/Areas/Apps/Views/Shared/Controls/_StaticControl.cshtml", ctrl);
                                                                break;
                                                        }
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    <div class="modal-footer" style="text-align: center !important;">
                        <input type="hidden" id="ARR_IDX" name="ARR_IDX" value="0" />
                        <input type="hidden" id="IS_EDIT" name="IS_EDIT" value="false" />
                        <input type="hidden" id="CUSREQ" name="CUSREQ" value="true" />
                        @* Frontis: เปลี่ยน width: 30% เป็น min-width: 30% เพราะบางครั้งข้อความยาวมาก *@
                        <button type="button" class="btn btn-default modal-cancel" data-dismiss="modal" style="min-width: 30%;">@ResourceHelper.GetResourceWordWithDefault("Close", "Apps_SingleForm_Template", "Close")</button>
                        <button type="submit" class="btn btn-primary modal-submit" style="min-width: 30%;">@ResourceHelper.GetResourceWordWithDefault(sec.SubmitButtonText, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm_Template"), sec.SubmitButtonText)</button>
                        @if (sec.Section == "COMMITTEE_INFORMATION")
                        {
                            <button type="submit" class="btn btn-primary modal-edit hidden" style="width: 30%;">เพิ่มข้อมูล</button>
                        }
                        else
                        {
                            var editBtnText = "แก้ไขข้อมูล";
                            if (string.IsNullOrEmpty(sec.SubmitButtonText))
                            {
                                editBtnText = @ResourceHelper.GetResourceWordWithDefault(sec.SubmitButtonText, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm_Template"), sec.SubmitButtonText);
                            }
                            <button type="submit" class="btn btn-primary modal-edit hidden" style="width: 30%;">@editBtnText</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </form>

}
@* End Modals *@

@* Info modal *@
<div class="modal single-form-modal fade" id="infoModalCustom" aria-labelledby="modalCustom">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="modalCustom">หลักเกณฑ์ในการใช้ชื่อสถานพยาบาลสัตว์ มีรายละเอียดดังนี้</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12 form-group">
                        <p style="text-indent:2%;font-weight:bold;">
                            (1) ชื่อสถานพยาบาลสัตว์ต้องเป็นตัวอักษรไทย กรณีใช้ตัวอักษรต่างประเทศด้วย ตัวอักษรต่างประเทศต้องมีความหมายเช่นเดียวกับตัวอักษรไทย ทั้งนี้ ชื่อสถานพยาบาลสัตว์จะต้อง ไม่สื่อความหมาย หรืออ้างอิงสถาบันพระมหากษัตริย์ เว้นแต่จะได้รับพระบรมราชานุญาตหรือพระราชานุญาต
                        </p>
                        <br />
                        <p style="text-indent:2%;font-weight:bold;">
                            (2) ชื่อสถานพยาบาลสัตว์ ต้องสอดคล้องกับลักษณะการให้บริการของสถานพยาบาลสัตว์ ดังนี้
                            - “คลินิก” สําหรับสถานพยาบาลสัตว์ที่ให้บริการตรวจ ป้องกัน รักษาโรคสัตว์ หรือผ่าตัดเล็ก ในกรณีที่ให้บริการที่พักสัตว์ป่วยไว้ค้างคืนจะต้องมีบริการตรวจค่าทางโลหิตวิทยา และค่าเคมีโลหิตด้วย
                            - “โรงพยาบาลสัตว์” สําหรับสถานพยาบาลสัตว์ที่ให้บริการตรวจ ป้องกัน รักษา โรคสัตว์ ผ่าตัดเล็ก ผ่าตัดใหญ่ ตรวจค่าทางโลหิตวิทยาและค่าเคมีโลหิต มีการให้บริการที่พักสัตว์ป่วย ไว้ค้างคืน และมีบริการเอกซเรย์เพื่อใช้ประกอบการวินิจฉัยโรคในสัตว์ป่วย
                        </p>
                        <br />
                        <p style="text-indent:2%;font-weight:bold;">
                            (3) การจัดให้มีชื่อสถานพยาบาลสัตว์ที่เน้นเฉพาะทาง ต้องเป็นสถานพยาบาลสัตว์ ที่มีผู้ประกอบวิชาชีพการสัตวแพทย์ซึ่งได้รับวุฒิบัตรหรืออนุมัติวุฒิบัตรหรือหนังสือรับรองจากสัตวแพทยสภา ให้เป็นผู้มีความรู้ความชํานาญในสาขาที่ใช้ชื่อดังกล่าว เป็นผู้ให้บริการ
                        </p>
                        <br />
                        <p style="text-indent:2%;font-weight:bold;">
                            (4) ชื่อสถานพยาบาลสัตว์จะต้องไม่ใช้คําหรือข้อความที่มีลักษณะชักชวนหรือโอ้อวดเกินจริง หรืออาจทําให้เกิดความเข้าใจผิดในสาระสําคัญเกี่ยวกับการประกอบกิจการสถานพยาบาลสัตว์
                        </p>
                        <br />
                        <p style="text-indent:2%;font-weight:bold;">
                            (5) สถานพยาบาลสัตว์ที่ตั้งอยู่ภายในจังหวัดเดียวกันจะต้องมีชื่อไม่ซ้ํากัน เว้นแต่ สถานพยาบาลสัตว์ที่ขออนุญาตจัดตั้งใหม่และผู้รับอนุญาตเดิมเป็นบุคคลหรือนิติบุคคลเดียวกัน หรือมีหนังสือยินยอมจากผู้รับอนุญาตเดิมให้ใช้ชื่อซ้ํากันได้ แต่ต้องมีอักษรหรือหมายเลขเรียงลําดับ หรือสถานที่ ต่อท้ายชื่อสถานพยาบาลสัตว์
                        </p>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="text-align: center !important;">
                @* Frontis: เปลี่ยน width: 30% เป็น min-width: 30% เพราะบางครั้งข้อความยาวมาก *@
                <button type="button" class="btn btn-primary modal-cancel" data-dismiss="modal" style="min-width: 30%;">ตกลง</button>
            </div>
        </div>
    </div>
</div>

@section PageScripts {
    <script type="text/javascript" src="@Url.Content("~/Scripts/arcgis-3.17.js")"></script>

    <script type="text/javascript">

        var specialTrigger = 0;
        var singleForm = {
            callbacks: {
                afterInitValidates: [],
                customDatas: [] // paremeters: data
            },
            customErrors: {},
            customRules: {},
            variables: {
                @foreach (var sec in sections.Where(o => o.Type == SectionType.ArrayOfForms))
                {
                    <text>
                    @string.Format("arrObj{0}", sec.Section): null,
                    </text>
                }
                templateNames: {
                    @foreach (var sec in sections.Where(o => o.Type == SectionType.ArrayOfForms))
                    {
                        if (sec.TemplateName != null)
                        {
                            <text>
                            "@sec.Section": "@sec.TemplateName",
                            </text>
                        }
                    }
                },
                draftData: {}
            },
            controls: {
                form: '#frmSingleForm',
                @foreach (var sec in sections.Where(o => o.Type == SectionType.ArrayOfForms))
                {
                    <text>
                    @string.Format("form{0}", sec.Section): '@string.Format("#frm{0}", sec.Section)',
                    </text>
                }
                formStatus: '#frmSingleForm #Status',
                formNextApp: '#frmSingleForm #IsNextApp'
            },
            functions: {
                init: function () {
                    singleForm.functions.initModalForm();

                    /*--- Prevent "Enter" as form submit ---*/
                    $(singleForm.controls.form).on('keyup keypress', function (e) {
                        var keyCode = e.keyCode || e.which;
                        if (keyCode === 13) {
                            var $focused = $(':focus');
                            if (!$focused.is("textarea")) {
                                e.preventDefault();
                                return false;
                            }
                        }
                    });

                    $(singleForm.controls.form + ' #btnNextAppSingleForm').ladda('bind');
                    $(singleForm.controls.form + ' #btnSubmitSingleForm').ladda('bind');
                    $(singleForm.controls.form).ajaxForm({
                        contentType: 'application/json',
                        dataType: 'json',
                        clearForm: false,
                        beforeSubmit: function (data, jqForm, options) {
                            // Save Draft
                            if ($(singleForm.controls.formStatus).val() == "@ApplicationStatusV2Enum.DRAFT.ToString()" && $(singleForm.controls.formNextApp).val() == "false") {
                                $.ladda('stopAll');
                                return true;
                            }

                            //Policy Term Popup  **Mock Up** Can see at Software House Permit - Modal Template in SectionGroupScript
                            var modalValid = true;
                            @*if ($('#policyModal_@appHeader').length > 0) {
                                if ($("#modalValid_@appHeader").val() == "false") {
                                    $("#policyModal_@appHeader").modal('show');
                                    $.ladda('stopAll');
                                    return false;
                                } else {
                                    modalValid = true;
                                }
                            }
                            else {
                                modalValid = true;
                            }*@

                            var formValid = jqForm.validate().form();
                            var errors = 0;

                            $("span.custom-req-danger").remove(); // Clear all custom Required <span>

                            @if (appHeader == "INFORMATION")
                            {
                                if (allApps.Contains(AppSystemNameTextConst.APP_LAW_OFFICE))
                                {
                                    <Text>
                                        var fnc_province = function ()
                                        {
                                            return $("select[name='ADDRESS_EN_PROVINCE_INFORMATION_STORE__ADDRESS_EN']").val() === $("select[name='ADDRESS_PROVINCE_INFORMATION_STORE__ADDRESS']").val() ;
                                        };
                                        var fnc_amphur = function ()
                                        {
                                            return $("select[name='ADDRESS_EN_AMPHUR_INFORMATION_STORE__ADDRESS_EN']").val() === $("select[name='ADDRESS_AMPHUR_INFORMATION_STORE__ADDRESS']").val() ;
                                        };
                                        var fnc_tumbol = function ()
                                        {
                                            return $("select[name='ADDRESS_EN_TUMBOL_INFORMATION_STORE__ADDRESS_EN']").val() === $("select[name='ADDRESS_TUMBOL_INFORMATION_STORE__ADDRESS']").val() ;
                                        };

                                        if (!fnc_province() || !fnc_amphur() || !fnc_tumbol())
                                        {
                                            if (!fnc_province()) {
                                                    $("select[name='ADDRESS_EN_PROVINCE_INFORMATION_STORE__ADDRESS_EN']").after("<span class='text-danger custom-req-danger'>กรุณาเลือกให้ตรงกับจังหวัดภาษาไทย</span>");
                                            }
                                            if (!fnc_amphur() || $("select[name='ADDRESS_EN_PROVINCE_INFORMATION_STORE__ADDRESS_EN']").val() !== $("select[name='ADDRESS_PROVINCE_INFORMATION_STORE__ADDRESS']").val()) {
                                                    $("select[name='ADDRESS_EN_AMPHUR_INFORMATION_STORE__ADDRESS_EN']").after("<span class='text-danger custom-req-danger'>กรุณาเลือกให้ตรงกับอำเภอภาษาไทย</span>");
                                            }
                                            if (!fnc_tumbol() || $("select[name='ADDRESS_EN_AMPHUR_INFORMATION_STORE__ADDRESS_EN']").val() !== $("select[name='ADDRESS_AMPHUR_INFORMATION_STORE__ADDRESS']").val()) {
                                                    $("select[name='ADDRESS_EN_TUMBOL_INFORMATION_STORE__ADDRESS_EN']").after("<span class='text-danger custom-req-danger'>กรุณาเลือกให้ตรงกับตำบลภาษาไทย</span>");
                                            }
                                            errors++;
                                        }

                                    </Text>
                                }
                            }

                            @foreach (var sec in sections)
                            {
                                var templateName = sec.TemplateName != null ? sec.TemplateName : sec.Section;
                                var secRows = sectionRows.Where(o => o.Section == sec.Section).OrderBy(o => o.RowNumber).ToArray();

                                string varSkipValidateSectionLevel = string.Format("skipSecionValidate_{0}{1}", sec.Section, DateTime.Now.Ticks);
                                <text>
                                var @varSkipValidateSectionLevel = false;
                                </text>

                                if (sec.Type == SectionType.ArrayOfForms)
                                {
                                    if (sec.ArrayRequiredAtLeast)
                                    {
                                        // Frontis: Check if this section is disabled or invisible.
                                        <text>
                                        var divContainer_@sec.Section = $("section[data-section-name='@sec.Section']").parent('div');
                                        var sectionDisabled_@sec.Section = $(divContainer_@sec.Section).attr('disabled') == 'disabled';
                                        var sectionVisibled_@sec.Section = $(divContainer_@sec.Section).is(':visible');
                                        </text>
                                        if (sec.Section == "APP_COMMERCIAL_PARTNER_SECTION_PART")
                                        {
                                            <text>
                                            var arrayRequired_@sec.Section = @string.Format("singleForm.variables.arrObj{0}.data.length", sec.Section) >= @sec.NumberRequiredAtLeast ? true : false;
                                            var radioRequired_APP_COMMERCIAL_REGISTRATION_TYPE_OPTION = ($(':input[type=radio][name^=APP_COMMERCIAL_REGISTRATION_TYPE_OPTION]:checked').val() === 'APP_COMMERCIAL_REGISTRATION_TYPE_PARTNERSHIP') ? true : false;
                                            if (!sectionDisabled_@sec.Section && !arrayRequired_@sec.Section && radioRequired_APP_COMMERCIAL_REGISTRATION_TYPE_OPTION) {
                                                $("[data-section-name=@sec.Section]").find("h5").after("<span class='text-danger custom-req-danger'>@Resources.Apps_SingleForm.RULE_ERROR_ARRAY_OF_FORM@ResourceHelper.GetResourceWordWithDefault(templateName, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm"), templateName)</span>");
                                                errors++;

                                                @varSkipValidateSectionLevel = true;
                                            }
                                            </text>
                                        }
                                        else
                                        {
                                            <text>
                                            var arrayRequired_@sec.Section = @string.Format("singleForm.variables.arrObj{0}.data.length", sec.Section) >= @sec.NumberRequiredAtLeast ? true : false;
                                            if (!sectionDisabled_@sec.Section && !arrayRequired_@sec.Section && sectionVisibled_@sec.Section) {
                                                $("[data-section-name=@sec.Section]").find("h5").after("<span class='text-danger custom-req-danger'>@Resources.Apps_SingleForm.RULE_ERROR_ARRAY_OF_FORM@ResourceHelper.GetResourceWordWithDefault(templateName, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm"), templateName)</span>");
                                                errors++;

                                                @varSkipValidateSectionLevel = true;
                                            }
                                            </text>
                                        }
                                        if (sec.Section == "COMMITTEE_INFORMATION")
                                        {
                                            <text>
                                            var authorizedCommitteeCount = 0;
                                            for (var idx = 0; idx < singleForm.variables.arrObjCOMMITTEE_INFORMATION.data.length; idx++) {
                                                var committee = singleForm.variables.arrObjCOMMITTEE_INFORMATION.data[idx];
                                                if (committee.JURISTIC_COMMITTEE_IS_AUTHORIZED_OPTION === 'no') {

                                                } else {
                                                    authorizedCommitteeCount++;
                                                }
                                            }
                                            if (authorizedCommitteeCount == 0) {
                                                $("[data-section-name=COMMITTEE_INFORMATION]").find("h5").after("<span class='text-danger custom-req-danger'>กรุณาเลือกกรรมการฯผู้ลงนามการขออนุญาตครั้งนี้อย่างน้อยหนึ่งคน</span>");
                                                errors++;

                                                @varSkipValidateSectionLevel = true;
                                            }
                                            </text>
                                        }

                                        if (sec.Section == "APP_SECURITIES_BUSINESS_COMMITTEE_AUTHORITY")
                                        {
                                            <text>
                                            debugger;
                                            var authorizedCommitteeInCompanyCount = 0;
                                            for (var idx = 0; idx < singleForm.variables.arrObjAPP_SECURITIES_BUSINESS_COMMITTEE_AUTHORITY.data.length; idx++) {
                                                var committeeInCompany = singleForm.variables.arrObjAPP_SECURITIES_BUSINESS_COMMITTEE_AUTHORITY.data[idx];
                                                if (committeeInCompany.DROPDOWN_APP_SECURITIES_BUSINESS_COMMITTEE_AUTHORITY_COMMITTEE_AUTHORITY_AUTHOR === 'NO') {

                                                } else {
                                                    authorizedCommitteeInCompanyCount++;
                                                }
                                            }
                                            if (authorizedCommitteeInCompanyCount == 0) {
                                                $("[data-section-name=APP_SECURITIES_BUSINESS_COMMITTEE_AUTHORITY]").find("h5").after("<span class='text-danger custom-req-danger'>กรุณาเพิ่มข้อมูลกรรมการที่มีอำนาจทำแทนบริษัทอย่างน้อยหนึ่งคน</span>");
                                                errors++;

                                                @varSkipValidateSectionLevel = true;
                                            }
                                            </text>
                                        }

                                    }
                                    <text>
                                    for (var idx = 0; idx < @(string.Format("singleForm.variables.arrObj{0}", sec.Section)).data.length; idx++) {
                                        // Frontis: Do not validate disabled ArrayOfForm
                                        var divContainer = $("section[data-section-name='@sec.Section']").parent('div');
                                        var sectionDisabled_@sec.Section = $(divContainer).attr('disabled') == 'disabled';
                                        if (!sectionDisabled_@sec.Section && !singleForm.functions.validateArrData(@(string.Format("singleForm.variables.arrObj{0}", sec.Section)), idx)) {
                                            errors++;

                                            @varSkipValidateSectionLevel = true;
                                        }
                                    }

                                    @* Set IS_EDIT to 'false' after validation  *@
                                    $('#@string.Format("MODAL_{0}", sec.Section)').find("input[name='IS_EDIT']").val('false').trigger('change');
                                    singleForm.functions.resetDataArrayObj("@string.Format("#frm{0}", sec.Section)");
                            </text>
                                }
                                if (sec.Type == SectionType.Form)
                                {
                                    @GenerateAdditionalValidation(secRows);
                                }

                                @* Frontis 2020-03-17: Validate rules at section level. Currently support only JSExpression validation. *@
                                if (sec.ValidationRules != null)
                                {
                                    foreach(var rule in sec.ValidationRules)
                                    {
                                        if (rule.Type == ValidationType.JSExpression && !string.IsNullOrEmpty(rule.JSExpression))
                                        {
                                            string varDivContainer = string.Format("divContainer_{0}{1}", sec.Section, DateTime.Now.Ticks);
                                            string varDivIsDisabled = string.Format("isDisabled_{0}{1}", sec.Section, DateTime.Now.Ticks);
                                            <text>
                                                if (@varSkipValidateSectionLevel == false) {
                                                    var @varDivContainer = $("section[data-section-name='@sec.Section']").parent('div');
                                                    var @varDivIsDisabled = $(@varDivContainer).attr('disabled') == 'disabled';
                                                    if (@varDivIsDisabled == false) {
                                                        var fnc = function() {
                                                            @Html.Raw(rule.JSExpression)
                                                        };

                                                        if (!fnc()) {
                                                            $("[data-section-name=@sec.Section]").find("h5").after("<span class='text-danger custom-req-danger'>@ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(sectionGroup.ResourceName, "Apps_SingleForm"), rule.ErrorMessage)</span>");
                                                            errors++;
                                                        }
                                                    }
                                                }

                                            </text>
                                        }
                                    }
                                }
                            }

                            let controlCount = {};
                            let ListCheckBox = [];
                            $('input:checkbox').each((index, item) => {
                                const controlName = item.dataset.controlName;
                                const controlMin = item.dataset.min === "" ? 0 : parseInt(item.dataset.min);
                                const controlMax = item.dataset.max === "" ? 0 : parseInt(item.dataset.max);

                                if (controlCount[controlName] === undefined) {
                                    controlCount[controlName] = {
                                        name: controlName,
                                        count: 0,
                                        min: controlMin,
                                        max: controlMax,
                                    }
                                }
                                if (item.checked) {
                                    controlCount[controlName]['count']++;
                                }
                            });
                            for (let index in controlCount) {
                                const name = controlCount[index].name;
                                const count = controlCount[index].count;
                                const min = controlCount[index].min;
                                const max = controlCount[index].max;

                                let isCheckMin = true;
                                let isCheckMax = true;

                                if (min > count) {
                                    isCheckMin = false;
                                    $("#" + name + "_ShowError").after("<span class='text-danger custom-req-danger'>กรุณาเลือกอย่างน้อย " + min + " รายการ</span>");
                                } else if (max < count && max > 0) {
                                    isCheckMax = false;
                                    $("#" + name + "_ShowError").after("<span class='text-danger custom-req-danger'>สามารถเลือกได้สูงสุด " + max + " รายการ</span>");
                                }

                                if (isCheckMin && isCheckMax) {
                                    $("#" + name + "_ShowError").after("");
                                } else {
                                    errors++;
                                }
                            }



                            formValid = formValid && errors == 0 && modalValid;

                            if (formValid && window.singleForm.sectionGroupValidators) {
                                @* Check validitity against all section group validators.  *@
                                for(var i = 0; i < (window.singleForm.sectionGroupValidators || []).length; i++) {
                                    var errorMsg = window.singleForm.sectionGroupValidators[i].validate();
                                    if (errorMsg) {
                                        swal('', errorMsg, "warning");
                                        $.ladda('stopAll');
                                        return false;
                                    }
                                }
                            }

                            // Next or Submit
                            if (!formValid) {
                                var errorText = $(singleForm.controls.formNextApp).val() == "false" ? "ไม่สามารถส่งข้อมูลได้" : "ไม่สามารถไปยังหน้าถัดไปได้";
                                swal(errorText, "กรุณาตรวจสอบข้อมูลให้ถูกต้องและครบถ้วน", "warning");
                                $.ladda('stopAll');
                            }

                            return formValid;
                        },
                        customData: function (data, jqForm, options) {
                            if ($(singleForm.controls.formStatus).val() == "@ApplicationStatusV2Enum.WAITING.ToString()") {
                                var l = $('#btnNextAppSingleForm, #btnSubmitSingleForm').ladda();
                                l.ladda('start');
                            }

                            @foreach (var sec in sections.Where(o => o.Type == SectionType.Form))
                            {
                                var secRows = sectionRows.Where(o => o.Section == sec.Section).OrderBy(o => o.RowNumber).ToArray();

                                <text>
                                var @sec.Section = $('section[data-section-name=@sec.Section] :input').serializeObject();
                                $('section[data-section-name=@sec.Section] input:checkbox:checked').each(function() {
                                    @(sec.Section)[$(this).attr('name')] = 'true';
                                });
                                $('section[data-section-name=@sec.Section] input:checkbox:not(:checked)').each(function() {
                                    @(sec.Section)[$(this).attr('name')] = 'false';
                                });
                                </text>

                                foreach (var row in secRows)
                                {
                                    foreach (var ctrl in row.Controls)
                                    {
                                        switch (ctrl.Type)
                                        {
                                            case ControlType.Dropdown:
                                                if (ctrl.IsAjaxDropdown)
                                                {
                        <text>
                            @string.Format("{0}.AJAX_DROPDOWN_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                                                }
                                                else
                                                {
                                                    if (!hasDupTitleDBD)
                                                    {
                                                        <text>
                                                            @string.Format("{0}.DROPDOWN_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("DROPDOWN_{0}", ctrl.DataKey)]').select2('data')[0].text;
                                                        </text>
                                                    }
                                                }

                                                break;
                                            case ControlType.GeoDropdown:
                        <text>
                            @string.Format("{0}.AJAX_DROPDOWN_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                                                break;
                                            case ControlType.ChainedDropdown:
                                                <text>
                            @string.Format("{0}.DROPDOWN1ST_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("DROPDOWN1ST_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.DROPDOWN2ND_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("DROPDOWN2ND_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                                                break;
                                            case ControlType.Chained5Dropdown:
                                                <text>
                            @string.Format("{0}.AJAX_DROPDOWN1_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN1_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.AJAX_DROPDOWN2_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN2_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.AJAX_DROPDOWN3_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN3_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.AJAX_DROPDOWN4_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN4_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.AJAX_DROPDOWN5_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN5_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                                                break;
                                            case ControlType.AddressForm:
                                                @*if (ctrl.DisplayReadonly)
                                                {
                                                    <text>
                            @string.Format("{0}.ADDRESS_PROVINCE_{1}", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_PROVINCE_{0}", ctrl.DataKey)]').select2('data')[0].id;
                            @string.Format("{0}.ADDRESS_AMPHUR_{1}", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_AMPHUR_{0}", ctrl.DataKey)]').select2('data')[0].id;
                            @string.Format("{0}.ADDRESS_TUMBOL_{1}", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_TUMBOL_{0}", ctrl.DataKey)]').select2('data')[0].id;
                            </text>
                                                }*@
                            if (!ctrl.DisplayStaticIfHasData && !ctrl.DisplayReadonly)
                            {
                                                    <text>
                            @string.Format("{0}.ADDRESS_PROVINCE_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_PROVINCE_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.ADDRESS_AMPHUR_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_AMPHUR_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.ADDRESS_TUMBOL_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_TUMBOL_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                                                }
                                                break;
                                            case ControlType.AddressFormEN:
                            if (!ctrl.DisplayStaticIfHasData && !ctrl.DisplayReadonly)
                            {
                                                    <text>
                            @string.Format("{0}.ADDRESS_EN_PROVINCE_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_EN_PROVINCE_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.ADDRESS_EN_AMPHUR_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_EN_AMPHUR_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("{0}.ADDRESS_EN_TUMBOL_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_EN_TUMBOL_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                                                }
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                }


                                <text>
                                @* Frontis: Check if this section is disabled. It is is, restore its data to the original version.  *@
                                var divContainer_@sec.Section = $("section[data-section-name='@sec.Section']").parent('div');
                                if ($(divContainer_@sec.Section).attr('disabled') == 'disabled') {
                                    @sec.Section = window.singleFormHelpers.form.dataManager.restoreSectionData('@sec.Section', @sec.Section);
                                } else {
                                    var restoreCtrls = $("section[data-section-name='@sec.Section']").find('.restorable-disabled');
                                    $(restoreCtrls).each(function (index, ctrl) {
                                        window.singleFormHelpers.form.dataManager.restoreFormData('@sec.Section', @sec.Section, ctrl);
                                    });
                                }
                                </text>
                            }

                            if ($(singleForm.controls.formNextApp).val() == "true") {
                                $(singleForm.controls.formStatus).val('@ApplicationStatusV2Enum.DRAFT.ToString()');
                            }

                            @* Frontis: Return original value if section is disabled. *@
                            var fncGetArrayOfFormData = function (section) {

                                var dataKey = 'arrObj' + section;
                                if (!singleForm.variables.hasOwnProperty(dataKey)) return [];

                                var sectionElm = $("section[data-section-name='" + section + "']");
                                var disabled = $(sectionElm).parent().attr('disabled');
                                if (disabled == 'disabled') {
                                    // This section is disabled so we need to restore original data before submitting.
                                    singleForm.variables[dataKey].data = window.singleFormHelpers.form.dataManager.restoreSectionData(section, singleForm.variables[dataKey].data);  // originalArrayOfFormDataList[section];
                                    return singleForm.variables[dataKey].data;
                                }

                                // if arrayOfForm is invisible, not save data
                                var divContainer_section = $("section[data-section-name='" + section + "']").parent('div');
                                if (!divContainer_section.is(':visible')) return [];

                                return singleForm.variables[dataKey].data;
                            }

                            var data = {
                                TransactionID: '@trid.ToString()',
                                appStep: '@ViewBag.CurrentApp',
                                Status: '@ApplicationStatusV2Enum.DRAFT.ToString()', //$(singleForm.controls.formStatus).val(),
                                SectionData: [
                                    @foreach (var sec in sections)
                                    {
                                        <text>
                                        {
                                            SectionName: "@sec.Section",
                                            FormData: @(sec.Type == SectionType.Form ? sec.Section : "null"),
                                            @* Frontis: ArrayData: @(sec.Type == SectionType.ArrayOfForms ? string.Format("singleForm.variables.arrObj{0}.data", sec.Section) : "null"), *@
                                            ArrayData: @Html.Raw((sec.Type == SectionType.ArrayOfForms ? string.Format(@"fncGetArrayOfFormData('{0}')", sec.Section) : "null")),
                                            Type: "@sec.Type"
                                        },
                                        </text>
                                    }
                                ]
                            };

                            if (singleForm.callbacks.customDatas && singleForm.callbacks.customDatas.length > 0) {
                                for (var i = 0; i < singleForm.callbacks.customDatas.length; i++) {
                                    var func = singleForm.callbacks.customDatas[i];
                                    if (typeof func === 'function') {
                                        func(data);
                                    }
                                }
                            }

                            options.data = JSON.stringify(data);
                        },
                        error: function (xhr, status, error, $form) {
                            var data = xhr.responseJSON;
                            $.ladda('stopAll');
                            notify2('error', '', data.Message);
                        },
                        success: function (responseText, statusText, xhr, $form) {
                            var data = xhr.responseJSON;
                            $.ladda('stopAll');

                            if ($(singleForm.controls.formStatus).val() == "@ApplicationStatusV2Enum.DRAFT.ToString()") {
                                if ($(singleForm.controls.formNextApp).val() == "true") {
                                    if (data.Type == 1) {
                                        notify2('success', 'กำลังไปยังหน้าถัดไป', '', '@(ViewBag.EditMode ? Html.Raw(attachUrl) : Html.Raw(Url.EncodedAction("Index", "SingleForm", new { trid = trid, app = currentApp + 1 })))');
                                    } else {
                                        notify2('error', '', data.Message);
                                    }
                                } else {
                                    notify2(data.Type == 1 ? 'success' : 'error', data.Message);
                                }
                            } else {
                                if (data.Type == 1) {
                                    notify2('success', 'กำลังไปยังหน้าถัดไป', '', '@attachUrl');
                                } else {
                                    notify2('error', '', data.Message);
                                }
                            }

                        }
                    });

                    singleForm.functions.getDraft();
                    singleForm.functions.formValidate();

                    //setTimeout(function () {
                    //    singleForm.functions.calculateOverview();
                    //}, 500);

                    //$(singleForm.controls.form).on('keyup change', function () {
                    //    singleForm.functions.calculateOverview();
                    //});
                },
                initModalForm: function () {
                    @{ var idx = 0; }

                    $('.modal.single-form-modal').on('hidden.bs.modal', function() {
                        var $modal = $(this);
                        var $form = $modal.parent('form');

                        $(":input", $form).each(function () {
                            var $this = $(this);
                            if (!$this.is(':radio')) {
                                $this.val('');
                            }
                            if ($this.is(':checkbox')) {
                                $this.prop('checked', false).trigger('change');
                            }
                            if ($this[0].tagName === 'SELECT') {
                                $this.trigger("change");
                            }
                        });
                        $("input[name=ARR_IDX]", $form).val("0");
                        $("input[name=IS_EDIT]", $form).val("false");

                        $form.find('label.error').hide();
                        $form.find('span.error').hide();
                    });

                    @foreach (var sec in sections.Where(o => o.Type == SectionType.ArrayOfForms))
                    {
                        var secRows = sectionRows.Where(o => o.Section == sec.Section).OrderBy(o => o.RowNumber).ToArray();

                        <text>
                        // Modal Buttons changing
                        $(singleForm.controls.@string.Format("form{0}", sec.Section) + " .modal-cancel").click(function () {
                            $("@string.Format("#frm{0} .modal-submit", sec.Section)").show();
                            if (!$("@string.Format("#frm{0} .modal-edit", sec.Section)").hasClass("hidden")) {
                                $("@string.Format("#frm{0} .modal-edit", sec.Section)").addClass("hidden");
                            }
                            singleForm.functions.resetDataArrayObj("@string.Format("#frm{0}", sec.Section)");
                        });

                        $("#MODAL_@sec.Section").on('show.bs.modal', function () {
                            var $modal = $(this);
                            var $form = $modal.parent('form');
                            $form.find("span.custom-req-danger").remove(); // Clear all custom Required <span>
                            if ($('input[name=IS_EDIT]', $form).val() != "true") {
                                $('input[name=ARR_IDX]', $form).val(((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data.length + 1));
                            }

                        });

                        var arrIdx_@idx = 0;

                    // Prevent enter key for ArrayOfForm Modal
                    // Because if some input is focused and this has logic script. It will not update value.
                    $(singleForm.controls.@string.Format("form{0}", sec.Section)).on('keydown keyup keypress', function (e) {
                        var keyCode = e.keyCode || e.which;
                        if (keyCode === 13) {
                            e.preventDefault();
                            return false;
                        }
                    });

                    // Init Object Data
                    singleForm.variables.@string.Format("arrObj{0}", sec.Section) = { section: "@sec.Section", data: [] };

                    // Modal Form Submit
                    $(singleForm.controls.@string.Format("form{0}", sec.Section)).submit(function (e) {
                        e.preventDefault();

                        var isValidate = $(singleForm.controls.@string.Format("form{0}", sec.Section)).validate().form();
                        var errors = 0;

                        $("span.custom-req-danger").remove();

                        @GenerateAdditionalValidation(secRows)

                        @if (sec.Section == "BRANCH_ADDRESS_INFORMATION")
                        {
                            <text>
                        if ($("[name=ADDRESS_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_MOO_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_MOO_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_VILLAGE_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_VILLAGE_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_SOI_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_SOI_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_YAK_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_YAK_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_BUILDING_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_BUILDING_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_FLOOR_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_FLOOR_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_ROOMNO_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_ROOMNO_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_ROAD_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_ROAD_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_PROVINCE_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_PROVINCE_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_AMPHUR_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_AMPHUR_JURISTIC_BRANCH_ADDRESS]").val() &&
                            $("[name=ADDRESS_TUMBOL_JURISTIC_HQ_ADDRESS]").val() == $("[name=ADDRESS_TUMBOL_JURISTIC_BRANCH_ADDRESS]").val()) {

                            swal("กรุณาตรวจสอบข้อมูลสาขา", "ที่อยู่สาขาต้องไม่ซ้ำกับที่อยู่สำนักงานใหญ่", "warning");
                            errors++;
                        }

                        var arr = @string.Format("singleForm.variables.arrObj{0}", sec.Section);
                        if (arr != null && arr.data.length > 0) {
                            for (var i = 0; i < arr.data.length; i++) {
                                var item = arr.data[i];
                                if (item.ARR_IDX != $("#frmBRANCH_ADDRESS_INFORMATION [name=ARR_IDX]").val() &&
                                    item.ADDRESS_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_MOO_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_MOO_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_VILLAGE_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_VILLAGE_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_SOI_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_SOI_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_YAK_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_YAK_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_BUILDING_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_BUILDING_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_FLOOR_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_FLOOR_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_ROOMNO_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_ROOMNO_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_ROAD_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_ROAD_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_PROVINCE_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_PROVINCE_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_AMPHUR_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_AMPHUR_JURISTIC_BRANCH_ADDRESS]").val() &&
                                    item.ADDRESS_TUMBOL_JURISTIC_BRANCH_ADDRESS == $("[name=ADDRESS_TUMBOL_JURISTIC_BRANCH_ADDRESS]").val()) {

                                    swal("กรุณาตรวจสอบข้อมูลสาขา", "ที่อยู่สาขาต้องไม่ซ้ำกับที่อยู่สาขาก่อนหน้า", "warning");
                                    errors++;
                                    break;
                                }
                            }
                        }
                        </text>
                        }

                        if (isValidate && errors == 0) {
                            // Serialize data from modal form to object
                            var tmp = $(singleForm.controls.@string.Format("form{0}", sec.Section)).serializeObject();
                            $(singleForm.controls.@string.Format("form{0}", sec.Section) + " input:radio:checked").each(function () {
                                tmp[$(this).attr('name') + '__RADIO_TEXT'] = $(this).data('radio-text');
                            })

                            $(singleForm.controls.@string.Format("form{0}", sec.Section) + " input:checkbox:checked").each(function() {
                                tmp[$(this).attr('name')] = 'true';
                            });
                            $(singleForm.controls.@string.Format("form{0}", sec.Section) + " input:checkbox:not(:checked)").each(function() {
                                tmp[$(this).attr('name')] = 'false';
                            });

                            if (singleForm.callbacks.customDatas && singleForm.callbacks.customDatas.length > 0) {
                                for (var i = 0; i < singleForm.callbacks.customDatas.length; i++) {
                                    var func = singleForm.callbacks.customDatas[i];
                                    if (typeof func === 'function') {
                                        func(tmp);
                                    }
                                }
                            }
                            var editObj = null;
                            </text>

                        foreach (var row in secRows)
                        {
                            foreach (var ctrl in row.Controls)
                            {
                                @*if (ctrl.DisplayRepeater)
                                {
                                    <text>
                            if (@string.Format("tmp.{0}", ctrl.DataKey) != null && @string.Format("tmp.{0}.length", ctrl.DataKey) > 0) {
                                @string.Format("tmp.{0}_JSON", ctrl.DataKey) = JSON.stringify(@string.Format("tmp.{0}", ctrl.DataKey));
                                @string.Format("tmp.{0}", ctrl.DataKey) = "datarepeater";
                            }
                            </text>
                                }*@

                    switch (ctrl.Type)
                    {
                        case ControlType.Dropdown:
                            if (ctrl.IsAjaxDropdown)
                            {
                                        <text>
                            @string.Format("tmp.AJAX_DROPDOWN_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                            }
                            else
                            {
                                            <text>
                            @string.Format("tmp.DROPDOWN_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("DROPDOWN_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                            }
                            break;
                        case ControlType.GeoDropdown:
                        <text>
                            @string.Format("{0}.AJAX_DROPDOWN_{1}_TEXT", sec.Section, ctrl.DataKey) = $('select[name=@string.Format("AJAX_DROPDOWN_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                            break;
                        case ControlType.ChainedDropdown:
                                        <text>
                            @string.Format("tmp.DROPDOWN1ST_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("DROPDOWN1ST_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("tmp.DROPDOWN2ND_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("DROPDOWN2ND_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                            break;
                        case ControlType.AddressForm:
                            if (!ctrl.DisplayStaticIfHasData && !ctrl.DisplayReadonly)
                            {
                                        <text>
                            @string.Format("tmp.ADDRESS_PROVINCE_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_PROVINCE_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("tmp.ADDRESS_AMPHUR_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_AMPHUR_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("tmp.ADDRESS_TUMBOL_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_TUMBOL_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                                    }
                                    break;
                        case ControlType.AddressFormEN:
                            if (!ctrl.DisplayStaticIfHasData && !ctrl.DisplayReadonly)
                            {
                                        <text>
                            @string.Format("tmp.ADDRESS_EN_PROVINCE_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_EN_PROVINCE_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("tmp.ADDRESS_EN_AMPHUR_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_EN_AMPHUR_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            @string.Format("tmp.ADDRESS_EN_TUMBOL_{0}_TEXT", ctrl.DataKey) = $('select[name=@string.Format("ADDRESS_EN_TUMBOL_{0}", ctrl.DataKey)]').select2('data')[0].text;
                            </text>
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                    }

                                <text>
                            // Check If Edit
                            if (tmp.IS_EDIT == "true") {
                                if ((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data != null && (singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data.length > 0) {
                                    var results = $.grep((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data, function (obj) {
                                        return obj.ARR_IDX == tmp.ARR_IDX;
                                    });
                                    if (results.length > 0) {
                                        editObj = results[0];
                                    }
                                }

                                if (editObj) {
                                    $.extend(editObj, tmp);
                                    singleForm.functions.renderHandlebars(singleForm.variables.@string.Format("arrObj{0}", sec.Section));
                                }

                                $("@string.Format("#frm{0} .modal-submit", sec.Section)").show();
                                $("@string.Format("#frm{0} .modal-edit", sec.Section)").addClass("hidden");
                                @if (appHeader == "INFORMATION")
                                {
                                    if (allApps.Contains(AppSystemNameTextConst.APP_LAW_OFFICE))
                                    {
                                        <Text>
                                        const DATA_ARRAY_OF_FORM_APP_LAW_OFFICE = (singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data;
                                        let countCommitteeLawyer = 0;
                                        for (let index in DATA_ARRAY_OF_FORM_APP_LAW_OFFICE) {
                                            if (DATA_ARRAY_OF_FORM_APP_LAW_OFFICE[index]["JURISTIC_COMMITTEE_IS_LAWYER_OPTION"] == "yes") {
                                                countCommitteeLawyer++;
                                            }
                                        }
                                        const isHaveCommitteeLawyer = countCommitteeLawyer > 0;
                                        $('input[name="HAVE_JURISTIC_COMMITTEE_IS_LAWYER_HAVE_JURISTIC_COMMITTEE_IS_LAWYER__TRUE"]').prop("checked", isHaveCommitteeLawyer);
                                        </Text>
                                    }
                                }

                                @if (SpecialSectionGroupConst.USE_SPECIAL_FUNCTION_ARRAY_OF_FORM.Contains(appHeader))
                                {
                                    @appHeader<Text>_Trigger((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data, "@sec.Section");</Text>
                                }
                            }
                            else
                            {
                                var tmpIdx;
                                do {
                                    arrIdx_@idx++;
                                    tmpIdx = $.grep((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data, function (e) {
                                        //return e.ARR_IDX == arrIdx_@idx; // Check if the objects are the same index
                                        return e.ARR_IDX == ((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data.length + 1);
                                    });
                                } while (tmpIdx != 0);

                                tmp.ARR_ITEM_ID = + new Date(); // Add ID for each item in ArrayOfForm
                                //tmp.ARR_IDX = (arrIdx_@idx).toString(); // Set index of object in array for modify and remove
                                tmp.ARR_IDX = ((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data.length + 1);
                                (singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data.push(tmp); // Push serialized data into an array of object
                                singleForm.functions.renderHandlebars(singleForm.variables.@string.Format("arrObj{0}", sec.Section)); // Render handlebars

                                singleForm.functions.getLength((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data);

                                @if (SpecialSectionGroupConst.USE_SPECIAL_FUNCTION_ARRAY_OF_FORM.Contains(appHeader))
                                {
                                    @appHeader<Text>_Trigger((singleForm.variables.@string.Format("arrObj{0}", sec.Section)).data, "@sec.Section");</Text>
                                }
                            }

                            // Close modal & Clear recently data
                            $("#@string.Format("{0}_{1}", "MODAL", sec.Section)").modal('hide');
                            //singleForm.functions.resetDataArrayObj("@string.Format("#frm{0}", sec.Section)");   @* Streaming: Why don't we call resetDataArrayObj function?  *@

                            @* Streaming: Reset DataTable control data *@
                            $("#@string.Format("{0}_{1}", "MODAL", sec.Section)").find("input[role='DATATABLE_VALUE']").val('[]').trigger('change');


                            var isValidate = $(singleForm.controls.form).validate().form();

                            // Scroll back to edited item
                            setTimeout(function(){
                                var offTop = $('div[data-arr_idx=' + tmp.ARR_IDX + ']').offset().top;
                                $('html,body').scrollTop(offTop-150);
                                //$('html,body').animate({
                                //    scrollTop: offTop
                                //}, 1000);
                            }, 500);
                        }

                    });

                    singleForm.functions.renderHandlebars(singleForm.variables.@string.Format("arrObj{0}", sec.Section));
                    </text>
                        idx++;
                    }
                },
                renderHandlebars: function (obj) {
                    // Init handlebars
                    var templateID = obj.section;
                    if (typeof singleForm.variables.templateNames[templateID] !== 'undefined') {
                        templateID = singleForm.variables.templateNames[templateID];
                    }
                    var source = $("#" + templateID + "Template").html();
                    var template = Handlebars.compile(source);
                    $("#insert_" + obj.section).html(template(obj));
                    if (obj.data.length > 0) {
                        var children = $("#insert_" + obj.section).children();
                        var obj_idx = 0;
                        var next_idx = 0;
                        children.each(function () {
                            var arr_idx = next_idx;
                            if (obj_idx < obj.data.length) {
                                arr_idx = parseInt(obj.data[obj_idx].ARR_IDX);
                                if (arr_idx >= next_idx) {
                                    next_idx = arr_idx + 1;
                                }
                            }
                            else {
                                next_idx++;
                            }
                            $(this).addClass('item_' + obj.section);
                            $(this).attr('data-ARR_IDX', arr_idx);
                            $(this).attr('data-tempsection', obj.section);
                            $(this).prepend($('<label class="error col-xs-12" style="margin-left: 15px; display: none;" data-ARR_IDX="' + arr_idx + '" data-tempsection="' + obj.section + '">กรุณากรอกข้อมูลให้ครบถ้วน</label>'));
                            obj_idx++;
                        });
                        if (obj.section == 'SOFTWARE_HOUSE_BUSINESS_SOFTWARE_DETAIL_MODULE') {
                            $('[name=SOFTWARE_TOTAL_MODULE]').val(obj_idx);
                        }
                        if (obj.section == 'SOFTWARE_HOUSE_BUSINESS_SOFTWARE_DETAIL_MODULE_EDIT') {
                            $('[name=SOFTWARE_TOTAL_MODULE_EDIT]').val(obj_idx);
                        }
                    }
                    else
                    {
                        if (obj.section == 'SOFTWARE_HOUSE_BUSINESS_SOFTWARE_DETAIL_MODULE') {
                            $('[name=SOFTWARE_TOTAL_MODULE]').val(0);
                        }
                        if (obj.section == 'SOFTWARE_HOUSE_BUSINESS_SOFTWARE_DETAIL_MODULE_EDIT') {
                            $('[name=SOFTWARE_TOTAL_MODULE_EDIT]').val(0);
                        }
                    }

                    // Frontis: Trigger databound event on this arrayOfForm
                    setTimeout(function () {
                        // Frontis: Propagate <section>-databound event to let listeners perform their actions once data is loaded.
                        $(document).trigger(obj.section + '-databound', [obj.section, obj.data]);
                    }, 500);
                },
                resetDataArrayObj: function(frm) {
                    $(frm)[0].reset();
                    $(frm + " label.error").hide(); // Hide ข้อความแจ้ง error
                    $(frm + " .show-condition").each(function() {
                        conditionDisplayUpdateVisible($(this), false);
                    });
                    $(frm + " input[name=ARR_IDX]").val("0");
                    $(frm + " input[name=IS_EDIT]").val("false");
                    $(frm + " select").val("").trigger("change");

                    @* Streaming: Trigger all registered controls for onchanged event. *@
                    $(triggerCtrlList).each(function (i, el) {
                        $(frm + " input[name=" + el + "]").val('').trigger("change");
                    });
                },
                validateArrData: function (arr, idx) {
                    var formId = singleForm.functions.editDataArrayObj(arr, arr.data[idx].ARR_IDX);
                    var isValidate = $(formId).validate().form();
                    if (!isValidate) {
                        $('label.error[data-ARR_IDX=' + arr.data[idx].ARR_IDX + '][data-tempsection='+ arr.section + ']').show();
                    }
                    else {
                        $('label.error[data-ARR_IDX=' + arr.data[idx].ARR_IDX + '][data-tempsection=' + arr.section + ']').hide();
                    }
                    return isValidate;
                },
                editDataArrayObj: function (arr, idx) {
                    // Call selected object from array
                    var results = $.grep(arr.data, function (e) {
                        return e.ARR_IDX == idx;
                    }, false);
                    $('label.error[data-ARR_IDX=' + results[0]["ARR_IDX"] + '][data-tempsection=' + arr.section + ']').hide();
                    singleForm.functions.resetDataArrayObj("#frm" + arr.section);
                    $("#frm" + arr.section + " input[name=ARR_IDX]").val(results[0]["ARR_IDX"]);
                    $("#frm" + arr.section + " input[name=IS_EDIT]").val(results[0]["IS_EDIT"]);

                    for (var key in results[0]) {
                        var datavalue = results[0][key];
                        if (key.includes("ADDRESS_PROVINCE") || key.includes("ADDRESS_AMPHUR") || key.includes("ADDRESS_TUMBOL") || key.includes("AJAX_DROPDOWN")) {
                            if (key.includes("_TEXT")) {
                                $("#frm" + arr.section + " input[name=" + key + "]").val(datavalue);
                            } else {
                                $("#frm" + arr.section + " select[name=" + key + "]")
                                .prepend("<option value='" + datavalue + "'>" + results[0][key + "_TEXT"] + "</option>")
                                .val(datavalue);
                            }
                            if (key.includes("ADDRESS_TUMBOL")) {
                                $("#frm" + arr.section + " select[name=" + key + "]").trigger('change');
                            }
                        }
                        else if (key.includes("ADDRESS_POSTCODE")) {
                            $("#frm" + arr.section + " input[name=" + key + "]").val(datavalue);
                            $("#frm" + arr.section + " select[name=" + key + "]")
                                .prepend("<option value='" + datavalue + "'>" + datavalue + "</option>")
                                .val(datavalue);
                            $("#frm" + arr.section + " select[name=" + key + "]").data('init', datavalue);
                        }
                        else if (key.includes("CHECKBOXES")) {
                            if (datavalue.constructor == String) {
                                datavalue = JSON.parse(datavalue);
                            }
                            $.each(datavalue, function (i, e) {
                                if ($("input[type=checkbox][name=" + key + "][value=" + e + "]").length != 0) {
                                    $("input[type=checkbox][name=" + key + "][value=" + e + "]").prop('checked', true).trigger('change');
                                } else {
                                    $("input#" + key.replace("_CHECKBOXES", "") + "_" + e + "[type=checkbox]").prop('checked', true).trigger('change');
                                }
                            });
                        }
                        else if (key.includes("_REPEATER")) {
                            if (datavalue.constructor == String) {
                                datavalue = JSON.parse(datavalue);
                            }

                            if (eval('typeof $rpt' + key) !== "undefined") {
                                eval('$rpt' + key).setList(datavalue);
                            }
                        }
                        else {
                            if ($("#frm" + arr.section + " input[type=radio][name=" + key + "]").length > 0) { // Radio Button
                                $("#frm" + arr.section + " input[name=" + key + "][value=" + datavalue + "]").prop('checked', true).trigger('change'); //.trigger('change');
                            } else if ($("#frm" + arr.section + " input[type=checkbox][name=" + key + "]").length == 1 && datavalue == "true") { // Check Box
                                $("#frm" + arr.section + " input[name=" + key + "]").prop('checked', true).trigger('change');
                            } else if ($("#frm" + arr.section + " input[type=hidden][name=" + key + "]").length == 1) { // Hidden
                                $("#frm" + arr.section + " input[name=" + key + "]").val(datavalue);
                            } else if ($("#frm" + arr.section + " input[name=" + key + "]").length == 1) { // Text Box and all other
                                $("#frm" + arr.section + " input[name=" + key + "]").val(datavalue);
                            } else if ($("#frm" + arr.section + " select[name=" + key + "]").length == 1) { // Select2
                                $("#frm" + arr.section + " select[name=" + key + "]").val(results[0][key]).trigger('change');
                            } else if ($("#frm" + arr.section + " textarea[name=" + key + "]").length > 0) { // Radio Button
                                $("#frm" + arr.section + " textarea[name=" + key + "]").val(results[0][key]).trigger('change');
                            }

                            @* Frontis: Trigger all registered controls for onchanged event. *@
                            if (triggerCtrlList.includes(key)) {
                                $("#frm" + arr.section + " input[name=" + key + "]").trigger('change');
                                $("#frm" + arr.section + " select[name=" + key + "]").trigger('change');
                            }
                        }
                    }

                    $("#frm" + arr.section + " input[name=IS_EDIT]").val("true");
                    $("#frm" + arr.section + " .modal-submit").hide();
                    $("#frm" + arr.section + " .modal-edit").removeClass("hidden");

                    setTimeout(function () {
                        // Frontis: Propagate <section>-databound event to let listeners perform their actions once data is loaded.
                        $(document).trigger(arr.section + '-modal-databound', [arr.section, results[0], singleForm.variables['arrObj' + arr.section].data, 'EDIT']);
                        $(document).trigger('allSections-modal-databound', [arr.section, results[0], singleForm.variables['arrObj' + arr.section].data, 'EDIT']);
                    }, 500);

                    return "#frm" + arr.section;
                },
                removeArrayObj: function (arr, idx) {
                    arr.data = $.grep(arr.data, function (e) {
                        return e.ARR_IDX == idx;
                    }, true);

                    for (var i = 1; i <= arr.data.length; i++) {
                        arr.data[i - 1].ARR_IDX = i;
                    }

                    if (arr.section == "SSO_EMPLOYEE_INFORMATION") {
                        ssoEmployeeCheck();
                    }

                    singleForm.functions.renderHandlebars(arr);
                    singleForm.functions.getLength(arr.data);

                    @if (SpecialSectionGroupConst.USE_SPECIAL_FUNCTION_ARRAY_OF_FORM.Contains(appHeader))
                    {
                        @appHeader<Text>_Trigger(arr.data, arr.section);</Text>
                    }
                },
                getLength: function (arr) {
                    @if (appHeader == AppSystemNameTextConst.APP_LAW_OFFICE)
                    {
                        <Text>
                            $('input[name="APP_LAW_OFFICE_INFO_SECTION_2_TOTAL_AMOUNT"]').val(arr.length);
                        </Text>
                    }
                },
                getDraft: function () {
                    showLoader(true);

                    $(document).trigger('singleform-dataloading', '@appHeader');

                    $.get('@Html.Raw(Url.Content("~/Api/V2/SingleForm/Draft?sectionGroup=" + appHeader + "&trid=" + trid))', function (data) {
                        if (data) {
                            @* Remember original form data loaded from API *@
                            window.singleFormHelpers.form.dataManager.setFormData(data);
                            singleForm.variables.draftData = data;

                            @{ var draftIdx = 0; }
                            @foreach (var sec in sections)
                            {
                                <text>
                            var @string.Format("sectionData_{0}", draftIdx) = $.grep(data.SectionData, function (e) {
                                return e.SectionName == "@sec.Section";
                            }, false);

                            if (@string.Format("sectionData_{0}.length", draftIdx) > 0) {
                                if (@string.Format("sectionData_{0}[0].Type", draftIdx) == "Form" &&
                                    (@string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_EXPLANATION" && @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_AGREEMENT" && @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_CONFIRMATION" && @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_EXAMPLE" && @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_ONLINE_REGIS")) {
                                    specialTrigger++;
                                    for (var key in @string.Format("sectionData_{0}[0].FormData", draftIdx)) {
                                        var datavalue = (@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key];
                                        if (key.includes("ADDRESS_PROVINCE") || key.includes("ADDRESS_AMPHUR") || key.includes("ADDRESS_TUMBOL") || key.includes("AJAX_DROPDOWN")
                                            || key.includes("ADDRESS_EN_PROVINCE") || key.includes("ADDRESS_EN_AMPHUR") || key.includes("ADDRESS_EN_TUMBOL")) {
                                            if (key.includes("_TEXT")) {
                                                $("input[name=" + key + "]").val(datavalue);
                                            } else if ($("input[type=hidden][name=" + key + "]").length > 0) {
                                                $("input[name=" + key + "]").val(datavalue);
                                            } else {
                                                $("select[name=" + key + "]")
                                                    .prepend("<option value='" + datavalue + "'>" + (@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key + "_TEXT"] + "</option>")
                                                    .val(datavalue);
                                            }
                                            if (key.includes("ADDRESS_TUMBOL") || key.includes("ADDRESS_EN_TUMBOL")) {
                                                $("select[name=" + key + "]").trigger('change');
                                            }
                                        }
                                        else if (key.includes("ADDRESS_POSTCODE")) {
                                            $("input[name=" + key + "]").val(datavalue);
                                            $("select[name=" + key + "]")
                                                .prepend("<option value='" + datavalue + "'>" + datavalue + "</option>")
                                                .val(datavalue);
                                            $("select[name=" + key + "]").data('init', datavalue);
                                        }
                                        else if (key.includes("CHECKBOXES")) {
                                            if (datavalue.constructor == String) {
                                                datavalue = JSON.parse(datavalue);
                                            }
                                            $.each(datavalue, function (i, e) {
                                                $("input[type=checkbox][name=" + key + "][value=" + e + "]").prop('checked', true).trigger('change');
                                            });
                                        }
                                        else if (key.includes("_REPEATER")) {
                                            if (datavalue.constructor == String) {
                                                datavalue = JSON.parse(datavalue);
                                            }

                                            if (eval('typeof $rpt' + key) !== "undefined") {
                                                eval('$rpt' + key).setList(datavalue);
                                            }
                                        }
                                        else {
                                            if ($("input[type=radio][name=" + key + "]").length > 0) { // Radio Button
                                                $("input[name=" + key + "][value=" + datavalue + "]").prop('checked', true).trigger('change');
                                            } else if ($("input[type=checkbox][name=" + key + "]").length == 1 && datavalue == "true") { // Check Box
                                                $("input[name=" + key + "]").prop('checked', true).trigger('change');
                                            } else if ($("input[name=" + key + "]").length == 1) { // Text Box and all other type
                                                $("input[name=" + key + "]").val(datavalue);
                                                if ($("input[name=" + key + "]").data("datetimetrigger-istrigger") == true) {
                                                    singleForm.functions.datetimeTrigger(
                                                        $("input[name=" + key + "]").data("datetimetrigger-method"),
                                                        key,
                                                        $("input[name=" + key + "]").data("datetimetrigger-destinationcontrol"),
                                                        $("input[name=" + key + "]").data("datetimetrigger-sourceformat"),
                                                        $("input[name=" + key + "]").data("datetimetrigger-sourceculture")
                                                    );
                                                }
                                            } else if ($("select[name=" + key + "]").length == 1) { // Select2
                                                if ($("select[name=" + key + "] option[value='" + (@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key] + "']").length > 0)
                                                    $("select[name=" + key + "]").val((@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key]).trigger('change');
                                            } else if ($("textarea[name=" + key + "]").length == 1) { // Textarea
                                                $("textarea[name=" + key + "]").val((@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key]).trigger('change');
                                            }

                                            @* Frontis: Fired onChange event if needed *@
                                            if (triggerCtrlList.includes(key)) {
                                                $("input[name=" + key + "]").trigger('change');
                                                $("select[name=" + key + "]").trigger('change');
                                            }
                                        }
                                    }

                                    //$('select[name=ADDRESS_TUMBOL_UTILITY_ADDRESS]').trigger('change');
                                } else if (@string.Format("sectionData_{0}[0].Type", draftIdx) == "ArrayOfForms" && @string.Format("sectionData_{0}[0].ArrayData", draftIdx) != null) { //&& @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "COMMITTEE_INFORMATION") {
                                    singleForm.variables.@string.Format("arrObj{0}.data", sec.Section) = JSON.parse(JSON.stringify(@string.Format("sectionData_{0}[0].ArrayData", draftIdx)));
                                    singleForm.functions.renderHandlebars(singleForm.variables.@string.Format("arrObj{0}", sec.Section));

                                    @* Frontis: Store original data of array of form *@
                                    originalArrayOfFormDataList['@sec.Section'] = JSON.parse(JSON.stringify(@string.Format("sectionData_{0}[0].ArrayData", draftIdx)));
                                }
                            }
                            </text>
                                draftIdx++;
                            }

                            setTimeout(function () {
                                // Frontis: Fire change event on .trigger-checkbox again to let controls notify its listeners.
                                $(".trigger-checkbox").trigger('change');

                                // Frontis: Propagate singleform-databound event to let listeners perform their actions once data is loaded.
                                $(document).trigger('singleform-databound', [data]);

                                // Resize form height according to loaded data
                                $('#frmSingleForm').css('height', 'auto');
                            }, 500);

                            singleForm.functions.updateWorkerCount();
                            singleForm.functions.F01_updateWorkerCount();   //***
                            //set_value();
                            //sum();
                            //setReadOnlyControlAndSumHP();
                        } else if (data === null) {
                            setTimeout(function () {
                                // Frontis: Fire change event on .trigger-checkbox again to let controls notify its listeners.
                                $(".trigger-checkbox").trigger('change');

                                // Frontis: Propagate singleform-databound event to let listeners perform their actions once data is loaded.
                                $(document).trigger('singleform-databound', [{}]);

                                // Resize form height according to loaded data
                                $('#frmSingleForm').css('height', 'auto');
                            }, 500);
                        }

                        $(document).trigger('singleform-dataloaded', '@appHeader');

                        showLoader(false);

                        //Trigger
                    })
                    .fail(function (jqXHR, text, error) {
                            showLoader(false);

                            swal({
                                title: 'เกิดข้อผิดพลาด',
                                text: 'ไม่สามารถเชื่อมต่อฐานข้อมูลได้',
                                type: 'error',
                                showCancelButton: true,
                                confirmButtonText: 'ลองใหม่อีกครั้ง',
                                cancelButtonText: 'กลับสู่หน้าหลัก',
                            }, function (isConfirm) {
                                if (isConfirm)
                                    window.location.reload();
                                else {
                                    window.location = '@Url.BizAction("Index", "Home", new { area="" })';
                                }
                            });
                    });
                },
                formValidate: function () {
                    $(singleForm.controls.form).removeData('validator');
                    $(singleForm.controls.form).validate({
                        ignore: ".ignore",
                        errorElement: 'span',
                        errorClass: 'error text-danger',
                        invalidHandler: function (e, validator) {
                            $.ladda('stopAll');
                        },
                        errorPlacement: function(error, element) {
                            var ele = element[0];
                            if ($('#' + ele.name + '-error').length === 0) {
                                if (ele.type == 'radio') {
                                    error.insertAfter(element.parents(".form-group:first").find("label:first"));
                                } else if (ele.type == 'text' && $(element).parent().hasClass('date')) {
                                    error.insertAfter(element.parent());
                                } else {
                                    error.appendTo(element.parent());
                                }
                            }
                        }
                    });

                    @foreach (var sec in sections.Where(o => o.Type == SectionType.ArrayOfForms))
                    {
                        <text>
                    $(singleForm.controls.@string.Format("form{0}", sec.Section)).validate({
                        ignore: ".ignore",
                        errorElement: 'span',
                        errorClass: 'error text-danger',
                        invalidHandler: function (e, validator) {
                            $.ladda('stopAll');
                        },
                        errorPlacement: function(error, element) {
                            var ele = element[0];
                            if ($('#' + ele.name + '-error').length === 0) {
                                if (ele.type == 'radio') {
                                    if (element.parents(".form-group:first").find("label:first").length == 0) {
                                        error.insertAfter(element.parents(".form-group:first").parents(".form-group:first").find("label:first"));
                                    } else {
                                        error.insertAfter(element.parents(".form-group:first").find("label:first"));
                                    }
                                } else if (ele.type == 'text' && $(element).parent().hasClass('date')) {
                                    error.insertAfter(element.parent());
                                } else {
                                    error.appendTo(element.parent());
                                }
                            }
                        }
                    });
                    </text>
                    }

                    for (var key in singleForm.customRules) {
                        var obj = singleForm.customRules[key];
                        $('[name=' + key + ']').rules('add', obj);
                    }

                    @{
                        foreach (var sec in sections)
                        {
                            var secRows = sectionRows.Where(o => o.Section == sec.Section).OrderBy(o => o.RowNumber).ToArray();
                            foreach (var row in secRows)
                            {
                                foreach (var ctrl in row.Controls.Where(o => o.Rules != null && o.Rules.Length > 0 && o.ValidateNeeded))
                                {
                                    if (ctrl.Type == ControlType.Email)
                                    {
                                        <text>
                    $('[name=@ctrl.DataKey]').rules('add', { regex: /^[A-Z0-9._-]+@@[A-Z0-9.-]+\.[A-Z0-9.-]+$/i, messages: { regex: "รูปแบบ Email ไม่ถูกต้อง" } } );
                    </text>
                                    }
                                    foreach (var rule in ctrl.Rules)
                                    {
                                        switch (rule.Type)
                                        {
                                            case ValidationType.Required:
                                                if (sec.Type == SectionType.Form)
                                                {
                                                    if (ctrl.Type == ControlType.AddressForm)
                                                    {
                                                        if (ctrl.AddressForm_ShowAddressIdControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_ID_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1@Resources.Apps_SingleForm.ADDRESS_ID@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2' } });
                    $('[name=ADDRESS_ID_@ctrl.DataKey]').rules('add', { regex: '[0-9]{11}', messages: { regex: 'กรุณากรอกรหัสประจำบ้าน โดยใช้ตัวเลข 0-9 จำนวน 11 หลัก' } });
                    </text>
                                                        }
                                                        if (!ctrl.AddressForm_IgnoreAddressControl)
                                                        {
                                        <text>
                    $('[name=ADDRESS_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1@Resources.Apps_SingleForm.ADDRESS_NO@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2' } });
                    </text>
                                                        }
                                                        <text>
                    $('[name=ADDRESS_MOO_@ctrl.DataKey]').rules('add', { regex: '[0-9]{1,2}', messages: { regex: 'กรุณากรอกหมู่ โดยใช้ตัวเลข 0-9 จำนวนไม่เกิน 2 หลัก' } });
                    $('[name=ADDRESS_PROVINCE_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT@Resources.Apps_SingleForm.ADDRESS_PROVINCE' } });
                    $('[name=ADDRESS_AMPHUR_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT@Resources.Apps_SingleForm.ADDRESS_AMPHUR' } });
                    $('[name=ADDRESS_TUMBOL_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT@Resources.Apps_SingleForm.ADDRESS_TUMBOL' } });
                    $('[name=ADDRESS_POSTCODE_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1@Resources.Apps_SingleForm.ADDRESS_POSTCODE@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2' } });
                    $('[name=ADDRESS_POSTCODE_@ctrl.DataKey]').rules('add', { regex: '[0-9]{5}', messages: { regex: 'กรุณากรอกรหัสไปรษณีย์ โดยใช้ตัวเลข 0-9 จำนวน 5 หลัก' } });
                    </text>
                                                        if (ctrl.AddressForm_ShowTelephoneControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_TELEPHONE_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1@Resources.Apps_SingleForm.ADDRESS_TELEPHONE@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2' } });
                    </text>
                                                        }
                                                        if (ctrl.AddressForm_ShowMapControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_LAT_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_LATLNG' } });
                    $('[name=ADDRESS_LNG_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_LATLNG' } });
                    </text>
                                                        }
                                                        if (ctrl.AddressForm_ShowEmailControl && ViewBag.IdentityType == UserTypeEnum.Juristic)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_EMAIL_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_EMAIL' } });
                    </text>
                                                        }
                                                    }
                                                    else if (ctrl.Type == ControlType.AddressFormEN)
                                                    {
                                                        if (!ctrl.AddressForm_IgnoreAddressControl)
                                                        {
                                        <text>
                    $('[name=ADDRESS_EN_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_EN @Resources.Apps_SingleForm.ADDRESS_EN_NO' } });
                    </text>
                                                        }
                                                        <text>
                    $('[name=ADDRESS_EN_MOO_@ctrl.DataKey]').rules('add', { regex: '[0-9]{1,2}', messages: { regex: 'กรุณากรอกหมู่ โดยใช้ตัวเลข 0-9 จำนวนไม่เกิน 2 หลัก' } });
                    $('[name=ADDRESS_EN_PROVINCE_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT_EN @Resources.Apps_SingleForm.ADDRESS_EN_PROVINCE' } });
                    $('[name=ADDRESS_EN_AMPHUR_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT_EN @Resources.Apps_SingleForm.ADDRESS_EN_DISTRICT' } });
                    $('[name=ADDRESS_EN_TUMBOL_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT_EN @Resources.Apps_SingleForm.ADDRESS_EN_SUB_DISTRICT' } });
                    $('[name=ADDRESS_EN_POSTCODE_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT_EN @Resources.Apps_SingleForm.ADDRESS_EN_POSTCODE' } });
                    $('[name=ADDRESS_EN_POSTCODE_@ctrl.DataKey]').rules('add', { regex: '[0-9]{5}', messages: { regex: 'กรุณากรอกรหัสไปรษณีย์ โดยใช้ตัวเลข 0-9 จำนวน 5 หลัก' } });
                    </text>
                                                        if (ctrl.AddressForm_ShowTelephoneControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_EN_TELEPHONE_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_EN @Resources.Apps_SingleForm.ADDRESS_EN_TELEPHONE' } });
                    </text>
                                                        }
                                                        if (ctrl.AddressForm_ShowMapControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_EN_LAT_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_LATLNG' } });
                    $('[name=ADDRESS_EN_LNG_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_LATLNG' } });
                    </text>
                                                        }
                                                        if (ctrl.AddressForm_ShowEmailControl && ViewBag.IdentityType == UserTypeEnum.Juristic)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_EMAIL_@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@Resources.Apps_SingleForm.RULE_ERROR_EMAIL' } });
                    </text>
                                                        }
                                                    }
                                                    else if (ctrl.Type == ControlType.CheckBoxWithDropdown)
                                                    {
                                                        foreach (var opt in ctrl.CheckboxWithDropdown)
                                                        {
                                                            <text>
                    $('[data-checkbox-group=@ctrl.DataKey] :input[type=checkbox][name=@opt.CheckboxWithDropdownOptName]').on('change', function () {
                        if ($('[data-checkbox-group=@ctrl.DataKey] :input[type=checkbox][name=@opt.CheckboxWithDropdownOptName]').prop('checked')) {
                            $('[name=@string.Format("DROPDOWN_{0}", opt.CheckboxWithDropdownOptName)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, "Apps_SingleForm", ctrl.Control)) )' } });
                        } else {
                            $('[name=@string.Format("DROPDOWN_{0}", opt.CheckboxWithDropdownOptName)]').rules('remove', 'customrequiredif');
                            $('[name=@string.Format("DROPDOWN_{0}", opt.CheckboxWithDropdownOptName)]').val("").trigger('change');
                        }
                    });
                    </text>
                                                        }
                                                    }
                                                    else if (ctrl.Type == ControlType.Dropdown || ctrl.Type == ControlType.GeoDropdown)
                                                    {
                                                        if (ctrl.IsAjaxDropdown || ctrl.GeoDropdown != null)
                                                        {
                        <text>
                    $('[name=@string.Format("AJAX_DROPDOWN_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                        }
                                                        else
                                                        {
                        <text>
                    $('[name=@string.Format("DROPDOWN_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                        }

                                                    }
                                                    else if (ctrl.Type == ControlType.ChainedDropdown)
                                                    {
                                                        <text>
                    $('[name=@string.Format("DROPDOWN1ST_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, "Apps_SingleForm", ctrl.Control)) )' } });
                    $('[name=@string.Format("DROPDOWN2ND_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.ChainedLabel, "Apps_SingleForm", ctrl.ChainedLabel)) )' } });
                    </text>
                                                    }
                                                    else if (ctrl.Type == ControlType.Chained5Dropdown)
                                                    {
                                                        <text>
                    $('[name=@string.Format("AJAX_DROPDOWN1_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}หมวดใหญ่", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    $('[name=@string.Format("AJAX_DROPDOWN2_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}หมวดย่อย", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    $('[name=@string.Format("AJAX_DROPDOWN3_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}หมู่ใหญ่", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    $('[name=@string.Format("AJAX_DROPDOWN4_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}หมู่ย่อย", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    $('[name=@string.Format("AJAX_DROPDOWN5_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}กิจกรรม", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    </text>
                                                    }
                                                    else if (ctrl.Type == ControlType.AjaxStaticControl)
                                                    {
                                                        if (ctrl.Control == "MEA_BRANCH")
                                                        {
                        <text>
                    $('[name=MEA_BRANCH_TH]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    $('[name=MEA_BRANCH_EN]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    $('[name=MEA_BRANCH_CODE]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    </text>
                                                        }
                                                        else if (ctrl.Control == "MWA_BRANCH")
                                                        {
                                                            <text>
                    $('[name=MWA_BRANCH_ID]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    $('[name=MWA_BRANCH_TEXT]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    </text>
                                                        }
                                                        else if (ctrl.Control == "TOT_BRANCH")
                                                        {
                                                            <text>
                    $('[name=TOT_1ST_BRANCH_ID]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    $('[name=TOT_1ST_BRANCH_TEXT]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    $('[name=TOT_2ND_BRANCH_ID]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    $('[name=TOT_2ND_BRANCH_TEXT]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    </text>
                                                        }
                                                        else if (ctrl.Control == "PWA_BRANCH")
                                                        {
                                                            <text>
                    $('[name=PWA_BRANCH_ID]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    $('[name=PWA_BRANCH_TEXT]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '' } });
                    </text>
                                                        }
                                                    }
                                                    else if (ctrl.Type == ControlType.RadioGroup)
                                                    {
                                                        <text>
                    $('[name=@ctrl.RadioGroup.RadioGroupName]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                    }
                                                    else if (ctrl.Type == ControlType.RadioGroupWithDropdownETC)
                                                    {
                                                        <text>
                    $('[name=@ctrl.RadioGroup.RadioGroupName]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                    }
                                                    else if (ctrl.Type == ControlType.RadioGroupWithText)
                                                    {
                                                        <text>
                    $('[name=@ctrl.RadioGroupWithText.RadioGroupName]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                    }
                                                    @*else if (ctrl.Type == ControlType.DateRangePicker)
                                                    {
                                                        <text>
                    $('[name=@string.Format("DATE_FROM_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    $('[name=@string.Format("DATE_TO_{0}", ctrl.DataKey)]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                    }*@
                                                    else
                                                    {
                                                        <text>
                    $('[name=@ctrl.DataKey]').rules('add', { customrequiredif: { dependentproperty: 'Status', targetvalue: '@ApplicationStatusV2Enum.WAITING.ToString()' }, messages: { customrequiredif: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm_Required"), rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control), Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2) )' } });
                    </text>
                                                    }
                                                }
                                                else // ArrayOfForm Type
                                                {
                                                    if (ctrl.Type == ControlType.AddressForm)
                                                    {
                                                        if (ctrl.AddressForm_ShowAddressIdControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_ID_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1@Resources.Apps_SingleForm.ADDRESS_ID@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2' } });
                    $('[name=ADDRESS_ID_@ctrl.DataKey]').rules('add', { regex: '[0-9]{11}', messages: { regex: 'กรุณากรอกรหัสประจำบ้าน โดยใช้ตัวเลข 0-9 จำนวน 11 หลัก' } });
                    </text>
                                                        }
                                                        if (!ctrl.AddressForm_IgnoreAddressControl)
                                                        {
                                        <text>
                    $('[name=ADDRESS_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1@Resources.Apps_SingleForm.ADDRESS_NO@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2' }});
                    </text>
                                                        }
                                                        <text>
                    $('[name=ADDRESS_PROVINCE_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT@Resources.Apps_SingleForm.ADDRESS_PROVINCE' } });
                    $('[name=ADDRESS_AMPHUR_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT@Resources.Apps_SingleForm.ADDRESS_AMPHUR' } });
                    $('[name=ADDRESS_TUMBOL_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT@Resources.Apps_SingleForm.ADDRESS_TUMBOL' } });
                    $('[name=ADDRESS_POSTCODE_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1@Resources.Apps_SingleForm.ADDRESS_POSTCODE@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2' } });
                    $('[name=ADDRESS_POSTCODE_@ctrl.DataKey]').rules('add', { regex: '[0-9]{5}', messages: { regex: 'กรุณากรอกรหัสไปรษณีย์ โดยใช้ตัวเลข 0-9 จำนวน 5 หลัก' } });
                    </text>
                                                        if (ctrl.AddressForm_ShowTelephoneControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_TELEPHONE_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1@Resources.Apps_SingleForm.ADDRESS_TELEPHONE@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2' } });
                    </text>
                                                        }
                                                        if (ctrl.AddressForm_ShowMapControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_LAT_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_LATLNG' } });
                    $('[name=ADDRESS_LNG_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_LATLNG' } });
                    </text>
                                                        }
                                                    }
                                                    else if (ctrl.Type == ControlType.AddressFormEN)
                                                    {
                                                        if (!ctrl.AddressForm_IgnoreAddressControl)
                                                        {
                                        <text>
                    $('[name=ADDRESS_EN_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_EN @Resources.Apps_SingleForm.ADDRESS_EN_NO' }});
                    </text>
                                                        }
                                                        <text>
                    $('[name=ADDRESS_EN_PROVINCE_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT_EN @Resources.Apps_SingleForm.ADDRESS_EN_PROVINCE' } });
                    $('[name=ADDRESS_EN_AMPHUR_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT_EN @Resources.Apps_SingleForm.ADDRESS_EN_DISTRICT' } });
                    $('[name=ADDRESS_EN_TUMBOL_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT_EN @Resources.Apps_SingleForm.ADDRESS_EN_SUB_DISTRICT' } });
                    $('[name=ADDRESS_EN_POSTCODE_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_SELECT_EN @Resources.Apps_SingleForm.ADDRESS_EN_POSTCODE' } });
                    $('[name=ADDRESS_EN_POSTCODE_@ctrl.DataKey]').rules('add', { regex: '[0-9]{5}', messages: { regex: 'กรุณากรอกรหัสไปรษณีย์ โดยใช้ตัวเลข 0-9 จำนวน 5 หลัก' } });
                    </text>
                                                        if (ctrl.AddressForm_ShowTelephoneControl)
                                                        {
                                                            <text>
                    $('[name=ADDRESS_EN_TELEPHONE_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_EN @Resources.Apps_SingleForm.ADDRESS_EN_TELEPHONE' } });
                    </text>
                                                        }
                                                        if (ctrl.AddressForm_ShowMapControl)
                                                        {
                                                            @*<text>
                    $('[name=ADDRESS_LAT_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_LATLNG' } });
                    $('[name=ADDRESS_LNG_@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@Resources.Apps_SingleForm.RULE_ERROR_LATLNG' } });
                    </text>*@
                                                                                                                        <text>
                    $('[name=ADDRESS_EN_LAT_@ctrl.DataKey]');
                    $('[name=ADDRESS_EN_LNG_@ctrl.DataKey]');
                    </text>
                                                        }
                                                    }
                                                    else if (ctrl.Type == ControlType.CheckBoxWithDropdown)
                                                    {
                                                        foreach (var opt in ctrl.CheckboxWithDropdown)
                                                        {
                                                            <text>
                    $('[data-checkbox-group=@ctrl.DataKey] :input[type=checkbox][name=@opt.CheckboxWithDropdownOptName]').on('change', function () {
                        if ($('[data-checkbox-group=@ctrl.DataKey] :input[type=checkbox][name=@opt.CheckboxWithDropdownOptName]').prop('checked')) {
                            $('[name=@string.Format("DROPDOWN_{0}", opt.CheckboxWithDropdownOptName)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                        } else {
                            $('[name=@string.Format("DROPDOWN_{0}", opt.CheckboxWithDropdownOptName)]').rules('remove', 'required');
                            $('[name=@string.Format("DROPDOWN_{0}", opt.CheckboxWithDropdownOptName)]').val("").trigger('change');
                        }
                    });
                    </text>
                                                        }
                                                    }
                                                    else if (ctrl.Type == ControlType.Dropdown || ctrl.Type == ControlType.GeoDropdown)
                                                    {
                                                        if (ctrl.IsAjaxDropdown || ctrl.GeoDropdown != null)
                                                        {
                        <text>
                    $('[name=@string.Format("AJAX_DROPDOWN_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                        }
                                                        else
                                                        {
                                                            <text>
                    $('[name=@string.Format("DROPDOWN_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                        }

                                                    }
                                                    else if (ctrl.Type == ControlType.ChainedDropdown)
                                                    {
                                                        <text>
                    $('[name=@string.Format("DROPDOWN1ST_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    $('[name=@string.Format("DROPDOWN2ND_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.ChainedLabel, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.ChainedLabel)) )' } });
                    </text>
                                                    }
                                                    else if (ctrl.Type == ControlType.Chained5Dropdown)
                                                    {
                                                        <text>
                    $('[name=@string.Format("AJAX_DROPDOWN1_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}หมวดใหญ่", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    $('[name=@string.Format("AJAX_DROPDOWN2_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}หมวดย่อย", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    $('[name=@string.Format("AJAX_DROPDOWN3_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}หมู่ใหญ่", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    $('[name=@string.Format("AJAX_DROPDOWN4_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}หมู่ย่อย", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    $('[name=@string.Format("AJAX_DROPDOWN5_{0}", ctrl.DataKey)]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}กิจกรรม", Resources.Apps_SingleForm.RULE_ERROR_SELECT) )' } });
                    </text>
                                                    }
                                                    else if (ctrl.Type == ControlType.RadioGroup)
                                                    {
                                                        <text>
                    $('[name=@ctrl.RadioGroup.RadioGroupName]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                            }
                                                    else if (ctrl.Type == ControlType.RadioGroupWithDropdownETC)
                                                    {
                                                        <text>
                    $('[name=@ctrl.RadioGroupWithDropdown.RadioGroupName]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                    }
                                                    else if (ctrl.Type == ControlType.RadioGroupWithText)
                                                    {
                                                        <text>
                    $('[name=@ctrl.RadioGroupWithText.RadioGroupName]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_SELECT, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control)) )' } });
                    </text>
                                                    }
                                                    else
                                                    {
                                                        <text>
                    $('[name=@ctrl.DataKey]').rules('add', { required: true, messages: { required: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1}", Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control), Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_2) )' } });
                    </text>
                                                    }
                                                }
                                                break;
                                            case ValidationType.MaxLength:
                                                if(ctrl.Type == ControlType.TextBox)
                                                {
                                                    <text>
                    $('[name=@ctrl.DataKey]').rules('add', { maxlength: @rule.MaxLength, messages: { maxlength: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0} {1} {2}", Resources.Apps_SingleForm.RULE_ERROR_MAXLENGTH1, rule.MaxLength, Resources.Apps_SingleForm.RULE_ERROR_MAXLENGTH2) )' } });
                    </text>
                                                }
                                                break;
                                            case ValidationType.OnlyDigitLength:
                                                if (ctrl.Type == ControlType.TextBox)
                                                {
                                                    <text>
                    $('[name=@ctrl.DataKey]').rules('add', { regex: '[0-9]{@rule.MaxLength}', messages: { regex: '@(rule.FixedMessage ? ResourceHelper.GetResourceWordWithDefault(rule.ErrorMessage, "Apps_SingleForm_Required", rule.ErrorMessage) : string.Format("{0}{1} ให้ครบ {2} ตัวอักษร", Resources.Apps_SingleForm.RULE_ERROR_TEXTBOX_1, ResourceHelper.GetResourceWordWithDefault(ctrl.Control, StringHelper.DefaultIfEmpty(ctrl.ResourceName, "Apps_SingleForm"), ctrl.Control), rule.MaxLength) )' } });
                    </text>
                                                }
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                getWorkerNumber: function(name) {
                    var value = $('input[name=' + name + ']').val();
                    if (value == '' || isNaN(value)) {
                        value = '0';
                    }
                    return parseInt(value);
                },
                updateWorkerCount: function() {
                    var worker = 0;
                    var executive = 0;
                    worker += singleForm.functions.getWorkerNumber('MALE_WORKER');
                    worker += singleForm.functions.getWorkerNumber('FEMALE_WORKER');

                    executive += singleForm.functions.getWorkerNumber('EXECUTIVE_OFFICER_AND_ACADEMICIAN');
                    executive += singleForm.functions.getWorkerNumber('FOREIGNER_PROFESSIONAL');
                    executive += singleForm.functions.getWorkerNumber('THAI_TECHNICIAN_AND_FOREIGNER_TECHNICIAN');

                    $('input[name=TOTAL_WORKER_AMOUNT]').val(worker);
                    $('input[name=GRAND_TOTAL_WORKER_AMOUNT]').val(executive + worker);
                },

                //getCustomerNumber: function(name) {
                //    var value = $('input[name=' + name + ']').val();
                //    if (value == '' || isNaN(value)) {
                //        value = '0';
                //    }
                //    return parseInt(value);
                //},
                //updateCustomerCount: function() {
                //    var income = 0;
                //    var noneincome = 0;
                //    var Auditorincome = 0;
                //    var Auditornoneincome = 0;
                //    income += singleForm.functions.getCustomerNumber('APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_ACCOUNTING_CUSTOMER_INCOME');
                //    noneincome += singleForm.functions.getCustomerNumber('APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_ACCOUNTING_CUSTOMER_NONE_INCOME')
                //    Auditorincome += singleForm.functions.getCustomerNumber('APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_AUDITORING_CUSTOMER_INCOME');
                //    Auditornoneincome += singleForm.functions.getCustomerNumber('APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_AUDITORING_CUSTOMER_NONE_INCOME')

                //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_AUDITORING_TOTAL_INCOME]').val(Auditorincome + Auditornoneincome);
                //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_ACCOUNTING_TOTAL_INCOME]').val(income + noneincome);

                //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_TOTAL_INCOME_POLICY]').val(Auditorincome + Auditornoneincome + income + noneincome);
                //},
                F01_getWorkerNumber: function(name) {
                    var value = $('input[name=' + name + ']').val();
                    if (value == '' || isNaN(value)) {
                        value = '0';
                    }
                    return parseInt(value);
                },
                F01_updateWorkerCount: function() {
                    var worker = 0;
                    var executive = 0;
                    worker += singleForm.functions.F01_getWorkerNumber('F01_MALE_WORKER');
                    worker += singleForm.functions.F01_getWorkerNumber('F01_FEMALE_WORKER');

                    executive += singleForm.functions.F01_getWorkerNumber('F01_EXECUTIVE_OFFICER_AND_ACADEMICIAN');
                    executive += singleForm.functions.F01_getWorkerNumber('F01_FOREIGNER_PROFESSIONAL');
                    executive += singleForm.functions.F01_getWorkerNumber('F01_THAI_TECHNICIAN_AND_FOREIGNER_TECHNICIAN');

                    $('input[name=F01_TOTAL_WORKER_AMOUNT]').val(worker);
                    $('input[name=F01_GRAND_TOTAL_WORKER_AMOUNT]').val(executive + worker);
                },
                getAreaNumber: function(name) {
                    var value = $('input[name=' + name + ']').val();
                    if (value == '' || isNaN(value)) {
                        value = '0';
                    }
                    return parseFloat(value);
                },
                updateAreaCount: function() {
                    var taxlong = 0;
                    var taxwidth = 0;
                    taxlong += singleForm.functions.getAreaNumber('APP_TAX_LONG');
                    taxwidth += singleForm.functions.getAreaNumber('APP_TAX_WIDTH');

                    $('input[name=APP_TAX_CENTIMETER]').val((taxlong * taxwidth).toFixed(2));
                },
                getClinicAreaNumber: function(name) {
                    var value = $('input[name=' + name + ']').val();
                    if (value == '' || isNaN(value)) {
                        value = '0';
                    }
                    return parseFloat(value);
                },
                updateClinicAreaCount: function() {
                    var arealength = 0;
                    var areawidth = 0;
                    arealength += singleForm.functions.getClinicAreaNumber('APP_CLINIC_PLAN_INFO_SECTION_LENGTH');
                    areawidth += singleForm.functions.getClinicAreaNumber('APP_CLINIC_PLAN_INFO_SECTION_WIDTH');

                    $('input[name=APP_CLINIC_PLAN_INFO_SECTION_AREA]').val((arealength * areawidth).toFixed(2));
                },
                checkValidManagerHSS_SPA: function() {
                    const value = $('input[name="APP_HEALTH_CARE_MANAGER_ID"]').val();

                    $.ajax({
                        url: '@Url.Content("~/Api/v2/HSS/SPA/CheckManager")',
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({
                            "IdCard": value,
                        }),
                        timeout: 30000,
                        success: function (data) {
                            if (data['RESULT']) {
                                $('input[name="APP_HEALTH_CARE_MANAGER_NAME"]').val(data['VALUE']);
                            } else {
                                $('input[name="APP_HEALTH_CARE_MANAGER_NAME"]').val();
                            }
                        },
                        error: function () {
                            $('input[name="APP_HEALTH_CARE_MANAGER_NAME"]').val("");
                        }
                    });
                },
                checkValidProviderHSS_SPA: function() {
                    const value = $('input[name="APP_HEALTH_CARE_SERVICE_PROVIDER_ID"]').val();

                    $.ajax({
                        url: '@Url.Content("~/Api/v2/HSS/SPA/CheckPersonal")',
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({
                            "IdCard": value,
                        }),
                        timeout: 30000,
                        success: function (data) {
                            if (data['RESULT']) {
                                $('input[name="APP_HEALTH_CARE_SERVICE_PROVIDER_NAME"]').val(data['VALUE']);
                            } else {
                                $('input[name="APP_HEALTH_CARE_SERVICE_PROVIDER_NAME"]').val();
                            }
                        },
                        error: function () {
                            $('input[name="APP_HEALTH_CARE_SERVICE_PROVIDER_NAME"]').val("");
                        }
                    });
                },
                checkValidSpaNameHSS_SPA: function() {
                    let SpaNameTh = $('input[name="INFORMATION_STORE_NAME_TH"]').val();
                    let ProvinceId = "";

                    @{
                        string ProvinceId = "";

                        foreach (var row in sectionRows)
                        {
                            foreach (var ctrl in row.Controls)
                            {
                                if (ctrl.DataKey == "INFORMATION_STORE__ADDRESS")
                                {
                                    ProvinceId = string.Format("{0}_{1}", "ADDRESS_PROVINCE", ctrl.ClientID);
                                    <Text>
                                    ProvinceId = $("#@ProvinceId").val();
                                    </Text>
                                }
                            }
                        }
                    }

                    $.ajax({
                        url: '@Url.Content("~/Api/v2/HSS/SPA/CheckSpaName")',
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({
                            "SpaNameTh": SpaNameTh,
                            "ProvinceId": ProvinceId,
                        }),
                        timeout: 30000,
                        success: function (data) {
                            if (data['RESULT']) {
                                $('input[name="INFORMATION_STORE_HEALTH_CARE_STATUS"]').val(data['VALUE']);
                            } else {
                                $('input[name="INFORMATION_STORE_HEALTH_CARE_STATUS"]').val(data['VALUE']);
                            }
                        },
                        error: function () {
                            $('input[name="INFORMATION_STORE_HEALTH_CARE_STATUS"]').val("");
                        }
                    });
                },
                calculateOverview: function () {
                    $(singleForm.controls.form).find('section[data-section-name]').each(function () {
                        var sectionName = $(this).attr('data-section-name'); // Name of section

                        // Textbox
                        var textboxCount = $(this).find('input:text').length;
                        var textboxReqCount = 0, textboxFilled = 0, textboxReqFilled = 0;
                        if (textboxCount > 0) {
                            $(this).find('input:text').each(function () {
                                if($(this).rules().hasOwnProperty('customrequiredif') || $(this).rules().hasOwnProperty('required')) {
                                    textboxReqCount++;
                                    if ($(this).val() != null && $(this).val() != "") {
                                        textboxFilled++;
                                        textboxReqFilled++;
                                    }
                                } else {
                                    if ($(this).val() != null && $(this).val() != "") {
                                        textboxFilled++;
                                    }
                                }
                            });
                        }

                        // Select
                        var selectCount = $(this).find('select').length;
                        var selectReqCount = 0, selectFilled = 0, selectReqFilled = 0;
                        if (selectCount > 0) {
                            $(this).find('select').each(function() {
                                if ($(this).rules().hasOwnProperty('customrequiredif') || $(this).rules().hasOwnProperty('required')) {
                                    selectReqCount++;
                                    if($(this).select2('data')[0].id != null && $(this).select2('data')[0].id != '') {
                                        selectFilled++;
                                        selectReqFilled++;
                                    }
                                } else {
                                    if($(this).select2('data')[0].id != null && $(this).select2('data')[0].id != '') {
                                        selectFilled++;
                                    }
                                }
                            });
                        }

                        // Checkbox
                        var checkboxCount = $(this).find('input:checkbox').length;
                        var checkboxReqCount = 0, checkboxFilled = 0, checkboxReqFilled = 0;
                        if (checkboxCount > 0) {
                            $(this).find('input:checkbox').each(function () {
                                if ($(this).rules().hasOwnProperty('customrequiredif') || $(this).rules().hasOwnProperty('required')) {
                                    checkboxReqCount++;
                                }
                            });

                            $(this).find('input:checkbox:checked').each(function () {
                                checkboxFilled++;
                                if ($(this).rules().hasOwnProperty('customrequiredif') || $(this).rules().hasOwnProperty('required')) {
                                    checkboxReqFilled++;
                                }
                            });
                        }

                        // Radio Group
                        var radiogroups = [];
                        var radiogroupCount = 0, radiogroupReqCount = 0, radiogroupFilled = 0, radiogroupReqFilled = 0;
                        $(this).find('input:radio').each(function () {
                            var radiogroupName = $(this).attr('name');
                            if (radiogroups.indexOf(radiogroupName) < 0) {
                                radiogroups.push(radiogroupName);
                                radiogroupCount++;
                                if ($('[name=' + radiogroupName + ']').rules().hasOwnProperty('customrequiredif') || $('[name=' + radiogroupName + ']').rules().hasOwnProperty('required')) {
                                    radiogroupReqCount++;
                                }
                            }
                        });

                        if (radiogroupCount > 0) {
                            radiogroupFilled = $(this).find('input:radio:checked').length;
                            $(this).find('input:radio:checked').each(function () {
                                if ($(this).rules().hasOwnProperty('customrequiredif') || $(this).rules().hasOwnProperty('required')) {
                                    radiogroupReqFilled++;
                                }
                            });
                        }

                        if (textboxCount > 0 || selectCount > 0 || checkboxCount > 0 || radiogroupCount > 0) {
                            var allInputs = textboxCount + selectCount + checkboxCount + radiogroupCount;
                            var allRequiredInputs = textboxReqCount + selectReqCount + checkboxReqCount + radiogroupReqCount;
                            var allFilled = textboxFilled + selectFilled + checkboxFilled + radiogroupFilled;
                            var allRequiredFilled = textboxReqFilled + selectReqFilled + checkboxReqFilled + radiogroupReqFilled;

                            var allPercentage = ((allFilled / allInputs) * 100).toFixed();
                            var allRequiredPercentage = ((allRequiredFilled / allRequiredInputs) * 100).toFixed();

                            $('[data-section-overview=' + sectionName + '] label[name=allRequiredPercentage] span').text(allRequiredPercentage);

                            $('[data-section-overview=' + sectionName + '] div.progress-bar').attr('aria-valuenow', allRequiredPercentage).css('width', allRequiredPercentage + '%');
                            if (allRequiredPercentage == 100) {
                                $('[data-section-overview=' + sectionName + '] div.progress-bar').removeClass('progress-bar-danger');
                                $('[data-section-overview=' + sectionName + '] div.progress-bar').addClass('progress-bar-success');

                                $('[data-section-overview=' + sectionName + '] div[name=allRequiredRemain]').hide();
                            } else {
                                $('[data-section-overview=' + sectionName + '] div.progress-bar').removeClass('progress-bar-success');
                                $('[data-section-overview=' + sectionName + '] div.progress-bar').addClass('progress-bar-danger');

                                $('[data-section-overview=' + sectionName + '] div[name=allRequiredRemain]').show();
                                $('[data-section-overview=' + sectionName + '] div[name=allRequiredRemain] span').text(allRequiredInputs - allRequiredFilled);
                            }
                        }
                    });

                },
                datetimeTrigger: function (method, sourceInput, destInput, format, culture) {
                    if (method != "null" && sourceInput != "null" && destInput != "null" && format != "null" && culture != "null") {
                        format = format.replace(/_/g, ' ');
                        $('input[name=' + destInput + ']').datepicker(method, moment($('input[name=' + sourceInput + ']').val(), format, culture).toDate());
                    }
                }
            }
        }

        $(document).ready(function () {
            if (@IsDBDError.ToString().ToLower()) {
                notify('error', 'ขออภัย ไม่สามารถเชื่อมต่อข้อมูลกรมพัฒนาธุรกิจการค้าได้ กรุณาเข้าใช้งานใหม่ในภายหลัง', true, '@BackUrl');
            }
            showLoader(true);

            // Register handlebars functions *** IMPORTANT !!! Always call it first ***
            Handlebars.registerHelper("x", function(expression, options) {
                var result;

                // you can change the context, or merge it with options.data, options.hash
                var context = this;

                // yup, i use 'with' here to expose the context's properties as block variables
                // you don't need to do {{x 'this.age + 2'}}
                // but you can also do {{x 'age + 2'}}
                // HOWEVER including an UNINITIALIZED var in a expression will return undefined as the result.
                with(context) {
                    result = (function() {
                        try {
                            return eval(expression);
                        } catch (e) {
                            console.warn('•Expression: {{x \'' + expression + '\'}}\n•JS-Error: ', e, '\n•Context: ', context);
                        }
                    }).call(context); // to make eval's lexical this=context
                }
                return result;
            });

            Handlebars.registerHelper("xif", function(expression, options) {
                return Handlebars.helpers["x"].apply(this, [expression, options]) ? options.fn(this) : options.inverse(this);
            });

            Handlebars.registerHelper("jsonparse", function(str) {
                return JSON.parse(str);
            });

            Handlebars.registerHelper("idxinc", function(idx) {
                return idx + 1;
            });
            // End Registering Handlebars functions

            // Normal Javascripts Begin
            singleForm.functions.init();

            $(window).load(function(){
                showLoader(false);
            });

            $(".show-condition").find("input").each(function(){
                $(this).addClass("ignore");
            });
            $(".show-condition").find("select").each(function(){
                $(this).addClass("ignore");
            });
            $(".show-condition").find("textarea").each(function(){
                $(this).addClass("ignore");
            });
            jQuery.extend(jQuery.validator.messages, {
                max: jQuery.validator.format("กรุณาใส่ค่าไม่เกิน {0}"),
                min: jQuery.validator.format("กรุณาใส่ค่ามากกว่า {0}")
            });
            @if (allApps.Where(x => x == AppSystemNameTextConst.APP_SELL_FOOD_LT_200).Count() > 0)
            {
            <text>
            $("input[name=INFORMATION_STORE_AREA]").attr('max', '200');
            </text>
            }
            @if (allApps.Where(x => x == AppSystemNameTextConst.APP_SELL_FOOD_LT_200_RENEW).Count() > 0)
            {
            <text>
            $("input[name=INFORMATION_STORE_AREA]").attr('max', '200');
            </text>
            }
            @if (allApps.Where(x => x == AppSystemNameTextConst.APP_SELL_FOOD_GE_200).Count() > 0)
            {
            <text>
            $("input[name=INFORMATION_STORE_AREA]").attr('min', '201');
            </text>
            }

            @if (allApps.Where(x => x == AppSystemNameTextConst.APP_SELL_FOOD_GE_200_EDIT).Count() > 0)
            {
            <text>
            $("input[name=INFORMATION_STORE_AREA]").attr('min', '201');
            </text>
            }

            @if (allApps.Where(x => x == AppSystemNameTextConst.APP_SELL_FOOD_GE_200_RENEW).Count() > 0)
            {
            <text>
            $("input[name=INFORMATION_STORE_AREA]").attr('min', '201');
            </text>
            }

            @if (allApps.Where(x => x == AppSystemNameTextConst.APP_HOTEL).Count() > 0)
            {
                <text>
                $("input[name=APP_HOTEL_AREA_WORK]").attr('max', '3');
                $("input[name=APP_HOTEL_AREA_SQUARE]").attr('max', '99');
                </text>
            }

            if ($('input[name=GRAND_TOTAL_WORKER_AMOUNT]').length > 0) {
                $('input[name=MALE_WORKER]').change(singleForm.functions.updateWorkerCount);
                $('input[name=FEMALE_WORKER]').change (singleForm.functions.updateWorkerCount);
                $('input[name=EXECUTIVE_OFFICER_AND_ACADEMICIAN]').change (singleForm.functions.updateWorkerCount);
                $('input[name=FOREIGNER_PROFESSIONAL]').change (singleForm.functions.updateWorkerCount);
                $('input[name=THAI_TECHNICIAN_AND_FOREIGNER_TECHNICIAN]').change (singleForm.functions.updateWorkerCount);
                $('input[name=TOTAL_WORKER_AMOUNT]').attr('disabled', 'disabled');
                $('input[name=GRAND_TOTAL_WORKER_AMOUNT]').attr('disabled', 'disabled');

            }

            if ($('input[name=F01_GRAND_TOTAL_WORKER_AMOUNT]').length > 0) {
                $('input[name=F01_MALE_WORKER]').change(singleForm.functions.F01_updateWorkerCount);
                $('input[name=F01_FEMALE_WORKER]').change (singleForm.functions.F01_updateWorkerCount);
                $('input[name=F01_EXECUTIVE_OFFICER_AND_ACADEMICIAN]').change (singleForm.functions.F01_updateWorkerCount);
                $('input[name=F01_FOREIGNER_PROFESSIONAL]').change (singleForm.functions.F01_updateWorkerCount);
                $('input[name=F01_THAI_TECHNICIAN_AND_FOREIGNER_TECHNICIAN]').change (singleForm.functions.F01_updateWorkerCount);
                $('input[name=F01_TOTAL_WORKER_AMOUNT]').attr('disabled', 'disabled');
                $('input[name=F01_GRAND_TOTAL_WORKER_AMOUNT]').attr('disabled', 'disabled');

            }

            if ($('input[name=APP_TAX_CENTIMETER]').length > 0) {
                $('input[name=APP_TAX_LONG]').change(singleForm.functions.updateAreaCount);
                $('input[name=APP_TAX_WIDTH]').change(singleForm.functions.updateAreaCount);
            }

            if ($('input[name=APP_CLINIC_PLAN_INFO_SECTION_AREA]').length > 0) {
                $('input[name=APP_CLINIC_PLAN_INFO_SECTION_LENGTH]').change(singleForm.functions.updateClinicAreaCount);
                $('input[name=APP_CLINIC_PLAN_INFO_SECTION_WIDTH]').change(singleForm.functions.updateClinicAreaCount);
                $('input[name=APP_CLINIC_PLAN_INFO_SECTION_AREA]').attr('readonly', true);
            }

            //if ($('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_ACCOUNTING_TOTAL_INCOME]').length > 0) {
            //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_ACCOUNTING_CUSTOMER_INCOME]').change(singleForm.functions.updateCustomerCount);
            //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_ACCOUNTING_CUSTOMER_NONE_INCOME]').change(singleForm.functions.updateCustomerCount);
            //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_AUDITORING_CUSTOMER_INCOME]').change(singleForm.functions.updateCustomerCount);
            //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_AUDITORING_CUSTOMER_NONE_INCOME]').change(singleForm.functions.updateCustomerCount);
            //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_AUDITORING_TOTAL_INCOME]').attr('disabled', 'disabled');
            //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_ACCOUNTING_TOTAL_INCOME]').attr('disabled', 'disabled');
            //    $('input[name=APP_ACCOUNTING_DETAIL_CALCULATE_SECTION_TOTAL_INCOME_POLICY]').attr('disabled', 'disabled');
            //}

            $('input[name="APP_HEALTH_CARE_MANAGER_ID"]').change(singleForm.functions.checkValidManagerHSS_SPA);
            $('input[name="APP_HEALTH_CARE_SERVICE_PROVIDER_ID"]').change(singleForm.functions.checkValidProviderHSS_SPA);

            @if (allApps.Contains(AppSystemNameTextConst.APP_HEALTH))
            {
                <Text>
                $('input[name="INFORMATION_STORE_NAME_TH"]').change(singleForm.functions.checkValidSpaNameHSS_SPA);
                $("#@ProvinceId").change(singleForm.functions.checkValidSpaNameHSS_SPA);
                </Text>
            }

        @if (appHeader == "INFORMATION")
            {
                if (allApps.Contains(AppSystemNameTextConst.APP_LAW_OFFICE))
                {
                    <Text>
                    //$('input[name="APP_LAW_OFFICE_GENERAL_OWNER_ADDRESS_APP_LAW_OFFICE_GENERAL_OWNER_ADDRESS_CONFIRM"]').change(function () {
                    //    if ($(this).prop('checked')) {
                    //        $('select[name="DROPDOWN_APP_LAW_OFFICE_GENERAL_OWNER_TITLE"]').val($('select[name="DROPDOWN_CITIZEN_TITLE"]').select2("data")[0].id).trigger("change");
                    //        $('select[name="DROPDOWN_APP_LAW_OFFICE_GENERAL_OWNER_TITLE_TEXT"]').val($('select[name="DROPDOWN_CITIZEN_TITLE"]').select2("data")[0].text);
                    //        $('input[name="APP_LAW_OFFICE_GENERAL_OWNER_FIRSTNAME"]').val($('input[name="CITIZEN_NAME"]').val());
                    //        $('input[name="APP_LAW_OFFICE_GENERAL_OWNER_LASTNAME"]').val($('input[name="CITIZEN_LASTNAME"]').val());
                    //    } else {
                    //        $('select[name="DROPDOWN_APP_LAW_OFFICE_GENERAL_OWNER_TITLE"]').val("").trigger("change");
                    //        $('input[name="APP_LAW_OFFICE_GENERAL_OWNER_FIRSTNAME"]').val("");
                    //        $('input[name="APP_LAW_OFFICE_GENERAL_OWNER_LASTNAME"]').val("");
                    //    }
                    //});

                    //$('input[name="APP_LAW_OFFICE_GENERAL_OWNER_SAME_APP_LAW_OFFICE_GENERAL_OWNER_SAME_CONFIRM"]').change(function () {
                    //    if ($(this).prop('checked')) {
                    //        $('select[name="DROPDOWN_APP_LAW_OFFICE_GENERAL_MANAGER_TITLE"]').val($('select[name="DROPDOWN_CITIZEN_TITLE"]').select2("data")[0].id).trigger("change");
                    //        $('select[name="DROPDOWN_APP_LAW_OFFICE_GENERAL_MANAGER_TITLE_TEXT"]').val($('select[name="DROPDOWN_CITIZEN_TITLE"]').select2("data")[0].text);
                    //        $('input[name="APP_LAW_OFFICE_GENERAL_MANAGER_FIRSTNAME"]').val($('input[name="CITIZEN_NAME"]').val());
                    //        $('input[name="APP_LAW_OFFICE_GENERAL_MANAGER_LASTNAME"]').val($('input[name="CITIZEN_LASTNAME"]').val());
                    //        $('select[name="DROPDOWN_APP_LAW_OFFICE_GENERAL_MANAGER_TITLE_EN"]').val($('select[name="DROPDOWN_CITIZEN_TITLE_EN"]').select2("data")[0].id).trigger("change");
                    //        $('select[name="DROPDOWN_APP_LAW_OFFICE_GENERAL_MANAGER_TITLE_EN_TEXT"]').val($('select[name="DROPDOWN_CITIZEN_TITLE_EN"]').select2("data")[0].text);
                    //        $('input[name="APP_LAW_OFFICE_GENERAL_MANAGER_FIRSTNAME_EN"]').val($('input[name="CITIZEN_NAME_EN"]').val());
                    //        $('input[name="APP_LAW_OFFICE_GENERAL_MANAGER_LASTNAME_EN"]').val($('input[name="CITIZEN_LASTNAME_EN"]').val());
                    //    } else {

                    //    }
                    //});
                    </Text>
                }
            }

        });

        @* Frontis: Assign singleForm to window in order to use in other script files. For example, scripts in 'Shared/SectionGroupScripts/' folder. *@
        window.singleForm = singleForm;
        window.singleForm.triggerCtrlList = triggerCtrlList;
        window.singleForm.allApps = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(allApps));
        window.singleForm.sectionGroupValidators = [];
        window.singleForm.functions.setSectionData = function (data) {
            @* Use the same code as functions.getDraft(). Should we make it as reusable function? *@
            if (data) {
		        @{ draftIdx = 0; }
		        @foreach (var sec in sections)
		        {
			        <text>
		            var @string.Format("sectionData_{0}", draftIdx) = $.grep(data.SectionData, function (e) {
			            return e.SectionName == "@sec.Section";
		            }, false);

		            if (@string.Format("sectionData_{0}.length", draftIdx) > 0) {
			            if (@string.Format("sectionData_{0}[0].Type", draftIdx) == "Form" &&
				            (@string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_EXPLANATION" && @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_AGREEMENT" && @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_CONFIRMATION" && @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_EXAMPLE" && @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "VAT_ONLINE_REGIS")) {
				            specialTrigger++;
				            for (var key in @string.Format("sectionData_{0}[0].FormData", draftIdx)) {
					            var datavalue = (@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key];
					            if (key.includes("ADDRESS_PROVINCE") || key.includes("ADDRESS_AMPHUR") || key.includes("ADDRESS_TUMBOL") || key.includes("AJAX_DROPDOWN")) {
						            if (key.includes("_TEXT")) {
							            $("input[name=" + key + "]").val(datavalue);
						            } else {
							            $("select[name=" + key + "]")
								            .prepend("<option value='" + datavalue + "'>" + (@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key + "_TEXT"] + "</option>")
								            .val(datavalue);
						            }
						            if (key.includes("ADDRESS_TUMBOL")) {
							            $("select[name=" + key + "]").trigger('change');
						            }
					            } else if (key.includes("ADDRESS_POSTCODE")) {
						            $("input[name=" + key + "]").val(datavalue);
						            $("select[name=" + key + "]")
							            .prepend("<option value='" + datavalue + "'>" + datavalue + "</option>")
							            .val(datavalue);
						            $("select[name=" + key + "]").data('init', datavalue);
					            } else if (key.includes("CHECKBOXES")) {
						            if (datavalue.constructor == String) {
							            datavalue = JSON.parse(datavalue);
						            }
						            $.each(datavalue, function (i, e) {
							            $("input[type=checkbox][name=" + key + "][value=" + e + "]").prop('checked', true).trigger('change');
						            });
					            } else if (key.includes("_REPEATER")) {
						            if (datavalue.constructor == String) {
							            datavalue = JSON.parse(datavalue);
                                    }

                                    if (eval('typeof $rpt' + key) !== "undefined") {
                                        eval('$rpt' + key).setList(datavalue);
                                    }
					            } else {
						            if ($("input[type=radio][name=" + key + "]").length > 0) { // Radio Button
							            $("input[name=" + key + "][value=" + datavalue + "]").prop('checked', true).trigger('change');
						            } else if ($("input[type=checkbox][name=" + key + "]").length == 1 && datavalue == "true") { // Check Box
							            $("input[name=" + key + "]").prop('checked', true).trigger('change');
						            } else if ($("input[name=" + key + "]").length == 1) { // Text Box and all other type
							            $("input[name=" + key + "]").val(datavalue);

							            // Fired onChange event if needed
							            if (triggerCtrlList.includes(key)) {
								            $("input[name=" + key + "]").trigger('change');
							            }
						            } else if ($("select[name=" + key + "]").length == 1) { // Select2
							            if ($("select[name=" + key + "] option[value='" + (@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key] + "']").length > 0)
								            $("select[name=" + key + "]").val((@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key]).trigger('change');
						            } else if ($("textarea[name=" + key + "]").length == 1) { // Textarea
							            $("textarea[name=" + key + "]").val((@string.Format("sectionData_{0}[0]", draftIdx)).FormData[key]).trigger('change');
						            }
					            }
				            }

				            //$('select[name=ADDRESS_TUMBOL_UTILITY_ADDRESS]').trigger('change');
			            } else if (@string.Format("sectionData_{0}[0].Type", draftIdx) == "ArrayOfForms" && @string.Format("sectionData_{0}[0].ArrayData", draftIdx) != null) { //&& @string.Format("sectionData_{0}[0].SectionName", draftIdx) != "COMMITTEE_INFORMATION") {
				            singleForm.variables.@string.Format("arrObj{0}.data", sec.Section) = JSON.parse(JSON.stringify(@string.Format("sectionData_{0}[0].ArrayData", draftIdx)));
				            singleForm.functions.renderHandlebars(singleForm.variables.@string.Format("arrObj{0}", sec.Section));
			            }
		            }
		            </text>
			        draftIdx++;
		        }

                setTimeout(function () {
                    // Frontis: Fire change event on .trigger-checkbox again to let controls notify its listeners.
                    $(".trigger-checkbox").trigger('change');

                    // Frontis: Propagate singleform-databound event to let listeners perform their actions once data is loaded.
                    $(document).trigger('singleform-databound', [data]);
                }, 500);

                singleForm.functions.updateWorkerCount();
                singleForm.functions.F01_updateWorkerCount();
                //set_value();
                //sum();
                //setReadOnlyControlAndSumHP();
                //ShowAddress();
                //HideENGAddress();
	        }
        }
    </script>

    @{
        var mapControl = sectionRows.Where(o => o.Controls.Any(p => p.AddressForm_ShowMapControl)).ToList();
        if (mapControl != null && mapControl.Count > 0)
        {
            <script async defer src="https://maps.googleapis.com/maps/api/js?key=@(ConfigurationValues.GoogleMapsKey)&libraries=places&callback=initMap"></script>
        }
    }

}
@* Include a SectionGroup script if available. *@
<script type="text/javascript" src="@Url.Content("~/Scripts/SingleForm-frontis/helpers/form-helper.js")">
</script>
@if (System.IO.File.Exists(Server.MapPath("~/Areas/Apps/Views/Shared/SectionGroupScripts/_" + sectionGroup.SectionGroup + "Script.cshtml")))
{
    Html.RenderPartial("~/Areas/Apps/Views/Shared/SectionGroupScripts/_" + sectionGroup.SectionGroup + "Script.cshtml", sectionGroup);
}

<script type="text/javascript">
    @* Update calendar date in the modal form. *@
    window.singleFormHelpers.form.onArrayOfFormModalDataBoundAll(function (section, data, datalist, action) {
        $("#MODAL_" + section).find('.input-group.date').each(function(index, div) {
            $(div).find('input').datepicker('update');
        });
    });
</script>

@* Frontis: Special css to fix modal popup for Google Map. This may not apply to other form so we put it here.  *@
<style>
    .modal {
        overflow-y: auto !important;
    }
</style>