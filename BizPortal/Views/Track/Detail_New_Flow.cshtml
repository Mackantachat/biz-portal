@model BizPortal.DAL.MongoDB.ApplicationRequestEntity
@using Resource = BizPortal.Resources
@using BizPortal.Utils.Helpers
@using System.Configuration
@using BizPortal.ViewModels.V2
@using BizPortal.AppsHook
@using BizPortal.DAL.MongoDB
@using BizPortal.Utils.Extensions
@using BizPortal.ViewModels.Constant;
@using BizPortal.Service;
@using BizPortal.ViewModels.SingleForm;

@{
    ViewBag.Title = string.Format(Resource.Tracking.TRACKING_TITLE, Model.ApplicationRequestNumber);
    ViewBag.LayoutSearch = false;
    Layout = "~/Views/Shared/_Layout.cshtml";

    string thisPageDateTimeFormat = "dd/MM/yyyy, HH.mm";
    string thisPageDateFormat = "dd/MM/yyyy";

    bool citizen = IdentityType == UserTypeEnum.Citizen;

    ApplicationRequestViewModel viewModel = new ApplicationRequestViewModel();
    Mapster.TypeAdapter.Adapt<ApplicationRequestEntity, ApplicationRequestViewModel>(Model, viewModel);
    IAppsHook hook = null;
    Dictionary<string, string> appTranslates = null;
    bool isEnabledChat = false;
    bool isEnableELicense = false;
    string billId = null;

    if (!string.IsNullOrEmpty(ViewBag.AppsHookClassName))
    {
        hook = (IAppsHook)Activator.CreateInstance("BizPortal.AppsHook", ViewBag.AppsHookClassName).Unwrap();
        appTranslates = hook.TranslateKeyValue(viewModel);
        isEnabledChat = hook.IsEnabledChat();
    }

    if (ViewBag.IsEnableELicense != null)
    {
        isEnableELicense = ViewBag.IsEnableELicense;
        viewModel.IsEnableELicense = ViewBag.IsEnableELicense;
        viewModel.ELicenses = ViewBag.ELicenses;
    }

    if (Model.BillPaymentFiles != null) 
    {
        billId = Model.BillPaymentFiles.OrderByDescending(o => o.CreatedDate).Select(e=>e.FileID).FirstOrDefault();
    }

    ViewBag.Hook = hook;
    ViewBag.IsDetailView = true;
    bool fromApiUpdate = ViewBag.FromApiUpdate;
}

@if (!citizen)
{
    @section breadcrumb{
        <div class="container">
            <ul class="breadcrumb">
                <li>
                    <a href="@Url.Action("Index", "Home", new { language = ViewBag.CurrentLang })">@Resource.Breadcrumb.HOME</a>
                </li>
                <li>
                    <a href="@Url.Action("Index", "Track", new { area = "", language = ViewBag.CurrentLang })">@Resource.Breadcrumb.TRACKING</a>
                </li>
                <li class="active">@Resource.Breadcrumb.TRACKING_DETAIL </li>
            </ul>
        </div>
    }
}

@section PageStyles {
    <style>
        div.form-control-info {
            position: relative;
            text-align: left;
            padding: 30px;
            border: 1px solid #DEDEDE;
            margin-bottom: 20px;
            background: #FFFFFF;
        }

        .disabled {
            color: lightgray;
        }

        .send-doc-box {
            padding-bottom: 10px;
        }
    </style>
}

<div class="container">
    <div class="panel panel-default">
        <div class="panel-heading" role="button" data-toggle="collapse" id="headingFirst" href="#collapseFirst" aria-expanded="true" aria-controls="collapseFirst">
            <strong>@Resource.ApplicationStatusRequests.APPLICATION_NAME</strong> :
            @Model.ApplicationName
            <span class="fa fa-chevron-down pull-right"></span>
        </div>
        <div id="collapseFirst" class="panel-collapse" aria-labelledby="headingFirst">
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-6 form-group">
                        @{
                            string requestorName = Model.IdentityName;
                            var requestor = Model.GetRequestorInfo();
                            if (requestor != null)
                            {
                                requestorName = requestor.Name;
                            }
                        }
                        @if (Model.IdentityType == UserTypeEnum.Juristic)
                        {
                            <div class="col-md-12">
                                <strong> @Resource.ApplicationStatusRequests.REQUEST_BY_JURISTIC</strong> :
                                @Model.IdentityName
                            </div>
                        }
                        else
                        {
                            <div class="col-md-12">
                                <strong> @Resource.ApplicationStatusRequests.REQUEST_BY_CITIZEN</strong> :
                                @Model.IdentityName
                            </div>
                        }
                        @if (Model.IdentityType != UserTypeEnum.Citizen)
                        {
                            <div class="col-md-12">
                                <strong> @Resource.ApplicationStatusRequests.REQUESTOR_NAME  </strong>:

                                @requestorName
                            </div>

                        }

                        <div class="col-md-12">
                            <strong>@Resource.ApplicationStatusRequests.APPLICATION_REQUEST_NUMBER</strong>
                            @Model.ApplicationRequestNumber
                        </div>
                        <div class="col-md-12">
                            <strong>@Resource.ApplicationStatusRequests.SUBMIT_DATE</strong>
                            @Model.CreatedDate.ToLocalTime().ToString("dd MMM yyyy HH:mm")
                        </div>

                        @if (Model.Fee.HasValue && Model.Fee > 0 && !string.IsNullOrEmpty(Model.PaymentMethod))
                        {
                            <div class="col-md-12">
                                <strong> @Resource.ApplicationStatusRequests.PAY_FEE_CHANNEL  </strong>:
                                @{
                                    var paymentMethod = string.IsNullOrEmpty(Model.PaymentMethod) ? "PAYMENT_Null" : "PAYMENT_" + @Model.PaymentMethod;
                                    if (Model.PaymentMethod == "AT_OWNER_ORG") 
                                         paymentMethod =  !string.IsNullOrEmpty(Model.PaymentMethodOrgDetail) ? Model.PaymentMethodOrgDetail :  Model.OrgNameTH.Trim();
                                }
                                @ResourceHelper.GetResourceWordWithDefault(paymentMethod, "ApplicationStatusRequests", paymentMethod, System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName)

                                @if (Model.PaymentMethod == "BILL_PAYMENT" && !string.IsNullOrEmpty(billId)) 
                                {
                                    <a class="" style="font-size: 20px; color: dodgerblue;" target="_blank" href="@Url.Action("GetV2", "File", new { id = billId, rid = Model.ApplicationRequestID, area = "" })">  [<span class="fa fa-download"></span> ดาวน์โหลด] </a>
                                }
                            </div>
                        }

                        @if (Model.DueDateForPayFee.HasValue && Model.DueDateForPayFee > DateTime.MinValue)
                        {
                            <div class="col-md-12">
                                <strong> @Resource.ApplicationStatusRequests.DUE_DATE_PAY_FEE </strong>:
                                @Model.DueDateForPayFee.Value.ToString(thisPageDateFormat)
                            </div>
                        }

                        <div class="col-md-12">
                            <strong> @Resource.ApplicationStatusRequests.RECEIVE_APP_CHANNEL  </strong>:
                            @{
                                var deliveryMethod = string.IsNullOrEmpty(Model.PermitDeliveryType) ? "PDT_Null" : "PDT_" + @Model.PermitDeliveryType;
                                if (Model.PermitDeliveryType == "AT_OWNER_ORG") 
                                    deliveryMethod = !string.IsNullOrEmpty(Model.PermitDeliveryOrgDetail) ? Model.PermitDeliveryOrgDetail :  Model.OrgNameTH.Trim();
                           
                                if (Model.PermitDeliveryType == "E_DOCUMENT")
                                    deliveryMethod = "E-Document";
                            }
                            @ResourceHelper.GetResourceWordWithDefault(deliveryMethod, "ApplicationStatusRequests", deliveryMethod, System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName)
                        </div>
                        @{
                            string deliveryAddress = "-";
                            switch (Model.PermitDeliveryType)
                            {
                                case "AT_OSS": deliveryAddress = string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["OSSAddress"]) ? "-" : System.Configuration.ConfigurationManager.AppSettings["OSSAddress"]; break;
                                case "AT_OWNER_ORG": deliveryAddress =  !string.IsNullOrEmpty(Model.PermitDeliveryOrgAddress) ? Model.PermitDeliveryOrgAddress : string.IsNullOrEmpty(Model.OrgAddress) ? "-" : Model.OrgAddress; break;
                                case "BY_MAIL": deliveryAddress = string.IsNullOrEmpty(Model.PermitDeliveryAddress) ? "-" : Model.PermitDeliveryAddress; break;
                                default: break;
                            }
                        }
                        @if (Model.PermitDeliveryType == PermitDeliveryTypeValueConst.AT_OWNER_ORG)
                        {

                            <div class="col-md-12">
                                <strong> @Resource.ApplicationStatusRequests.RECEIVE_APP_LOCATION</strong> :
                                @deliveryAddress
                            </div>

                            if (Model.UserCanGetAppDate.HasValue)
                            {
                                <div class="col-md-12">
                                    <strong>@Resource.ApplicationStatusRequests.USER_CAN_GET_APP_DATE</strong> :

                                    @if (Model.UserCanGetAppDateEnd.HasValue)
                                    {
                                        @Html.Raw(string.Format("{0} {1} {2}", Model.UserCanGetAppDate.Value.ToString(thisPageDateFormat), Resource.Global.TO, Model.UserCanGetAppDateEnd.Value.ToString(thisPageDateFormat)));
                                    }
                                    else
                                    {
                                        @Html.Raw(Model.UserCanGetAppDate.Value.ToString(thisPageDateFormat));
                                    }
                                </div>
                            }

                        }
                        @if (Model.Status == ApplicationStatusV2Enum.COMPLETED && Model.PermitDeliveryType == PermitDeliveryTypeValueConst.BY_MAIL)
                        {
                            <div class="col-md-12">
                                <strong> @Resource.ApplicationStatusRequests.EMS_TRACKING </strong>:
                                @Model.EMSTrackingNumber
                            </div>

                            <div class="col-md-12">
                                <strong> @Resource.ApplicationStatusRequests.EMS_TRACKING_THAIPOST </strong>:
                                <a href="http://track.thailandpost.co.th/tracking/default.aspx" target="_blank"> http://track.thailandpost.co.th/tracking/default.aspx</a>
                            </div>
                        }
                    </div>
                    <div class="col-md-6 form-group">
                        <div class="col-md-12">
                            <strong>@Resource.ApplicationStatusRequests.APPLICATION_STATUS_REQUEST</strong>
                            @Model.StatusName
                        </div>
                        <div class="col-md-12">
                            <strong>@Resource.ApplicationStatusRequests.APPLICATION_STATUS_OTHER_REQUEST</strong>
                            @Model.GetStatusOtherText()
                        </div>
                        @if (!string.IsNullOrEmpty(Model.StatusRemark))
                        {
                            <div class="col-md-12">
                                <strong>@Resource.ApplicationStatusRequests.APPLICATION_STATUS_REMARK</strong>
                                @Model.StatusRemark
                            </div>
                        }
                        @*<div class="col-md-12">
                                <strong>@Resource.ApplicationStatusRequests.AGENT_NAME_TC_APP</strong>
                                @ViewBag.UpdatedByAgentName
                            </div>
                            <div class="col-md-12">
                                <strong>@Resource.ApplicationStatusRequests.AGENT_TEL_TC_APP</strong>
                                @ViewBag.UpdatedByAgentPhone
                            </div>*@
                    </div>
                </div>
                @{
                    int rows = 1;
                    bool firstRow = true;
                }
            </div>
        </div>
    </div>

    @* ซ่อนกรณีที่เป็น VAT *@
    @if (Model.ApplicationID != 9)
    {
        <div class="panel panel-default">
            <div class="panel-heading" role="button" data-toggle="collapse" id="headingActionResponse" href="#collapseActionResponse" aria-expanded="true" aria-controls="collapseActionResponse">
                <a href="javascript:void(0)">@Resource.ApplicationStatusRequests.PROCESSING_HEADER</a>
                <span class="fa fa-chevron-down pull-right"></span>
            </div>
            <div id="collapseActionResponse" class="panel-collapse collapse in" aria-labelledby="headingActionResponse">
                <div class="panel-body">
                    <div class="row">
                        @if (viewModel.Status != ApplicationStatusV2Enum.INCOMPLETE)
                        {
                            var transObject = Model.Transactions.Where(s => s.ReplyFromOrg == true).OrderByDescending(o => o.CreatedDate).FirstOrDefault();
                            string agentRemark = transObject == null ? "" : transObject.Remark;

                            <div class="col-md-12 form-group">
                                <div class="col-md-12">

                                    @if ((Model.Status == ApplicationStatusV2Enum.CHECK || Model.Status == ApplicationStatusV2Enum.PENDING) && Model.StatusOther == ApplicationStatusOtherValueConst.WAITING_USER_WORKING)
                                    {
                                        if (!string.IsNullOrEmpty(agentRemark))
                                        {
                                            <div class="row">
                                                <div class="col-md-12" style="word-wrap: break-word;">
                                                    <strong>@Resource.ApplicationStatusRequests.AGENT_COMMENT_REMARK : </strong>
                                                    @agentRemark
                                                </div>
                                            </div>
                                        }

                                        //===== Start create รายการเอกสารแนบของหน่วยงาน =====
                                        var recentReplyFromOrg = Model.Transactions.Where(s => s.IdentityType == UserTypeEnum.GovernmentAgent).OrderByDescending(o => o.CreatedDate).FirstOrDefault();
                                        if (recentReplyFromOrg != null && ((recentReplyFromOrg.UploadedFiles != null && recentReplyFromOrg.UploadedFiles.Count > 0) ||
                                                                        (recentReplyFromOrg.GovFiles != null && recentReplyFromOrg.GovFiles.Count > 0)))
                                        {
                                            <span class="block">
                                                <br /><strong>@Resource.ApplicationStatusRequests.ATTACH_DOCUMENT_OF_STAFF</strong>
                                            </span>
                                            if (recentReplyFromOrg.IdentityType == UserTypeEnum.GovernmentAgent && recentReplyFromOrg.GovFiles != null && recentReplyFromOrg.GovFiles.Count > 0)
                                            {
                                                rows = 1;
                                                <table class="table table-bordered table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th class="text-center" style="width: 40px;">#</th>
                                                            <th class="text-center" style="width: 250px;">@Resource.ApplicationStatusRequests.DOCUMENT_NAME</th>
                                                            <th class="text-center">@Resource.ApplicationStatusRequests.DOCUMENT_FILE_NAME</th>
                                                            <th class="text-center" style="width: 250px;">@Resource.ApplicationStatusRequests.UPLOAD_FILE_DOC_EXPLANATION</th>
                                                            <th class="text-center" style="width: 160px;">@Resource.ApplicationStatusRequests.DOCUMENT_DATETIME</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var file in recentReplyFromOrg.GovFiles)
                                                        {
                                                            <tr>
                                                                <td class="text-center">@rows</td>
                                                                <td class="text-left">@file.GovDocumentName</td>
                                                                <td class="text-left">
                                                                    @if (file.Extras.TryGetBool("PREDOC", false))
                                                                    {
                                                                        <span>@file.FileName</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <a target="_blank" href="@Url.Action("GetV2", "File", new { id = file.FileID, rid = Model.ApplicationRequestID, area = "" })" class="file-link">@file.FileName</a>
                                                                    }
                                                                </td>
                                                                <td class="text-left" style="word-wrap: break-word;">@file.GovDocumentDescription</td>
                                                                <td class="text-left">@file.UpdatedDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                                            </tr>
                                                            rows += 1;
                                                        }
                                                    </tbody>
                                                </table>
                                            }

                                            if (recentReplyFromOrg.UploadedFiles != null && recentReplyFromOrg.UploadedFiles.Count > 0)
                                            {
                                                firstRow = true;
                                                foreach (var group in recentReplyFromOrg.UploadedFiles)
                                                {
                                                    if (!firstRow)
                                                    {
                                                        <div class="line pull-in"></div>
                                                    }
                                                    firstRow = false;

                                                    <article class="media">
                                                        <div class="media-body">
                                                            @if (!string.IsNullOrEmpty(group.Description))
                                                            {
                                                                <div>
                                                                    <span>@group.Description</span>
                                                                </div>
                                                            }
                                                            @if (group.Extras != null && group.Extras.Count > 0)
                                                            {
                                                                <blockquote class="fs12">
                                                                    @foreach (var extra in group.Extras)
                                                                    {
                                                                        <span class="block">
                                                                            <strong>@ResourceHelper.GetResourceWordWithDefault(extra.Key, "ExtraKey", extra.Key)</strong> @extra.Value
                                                                        </span>
                                                                    }
                                                                </blockquote>
                                                            }
                                                            @if (group.Files != null && group.Files.Count > 0)
                                                            {
                                                                rows = 1;
                                                                <table class="table table-bordered table-striped">
                                                                    <thead>
                                                                        <tr>
                                                                            <th class="text-center" style="width: 40px;">#</th>
                                                                            <th class="text-center">@Resource.ApplicationStatusRequests.DOCUMENT_NAME</th>
                                                                            <th class="text-center" style="width: 150px;">@Resource.ApplicationStatusRequests.DOCUMENT_TYPE</th>
                                                                            <th class="text-center" style="width: 120px;">@Resource.ApplicationStatusRequests.DOCUMENT_SIZE</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        @foreach (var file in group.Files)
                                                                        {
                                                                            <tr>
                                                                                <td class="text-left">@rows</td>
                                                                                <td>
                                                                                    <a href="javascript:void(0)" class="file-link">@file.FileName</a>
                                                                                </td>
                                                                                <td class="text-left">@BizPortal.Service.TrackService.fileNameFunc(file, appTranslates)</td>
                                                                                <td class="text-left file-size">@file.FileSize</td>
                                                                            </tr>
                                                                            rows += 1;
                                                                        }
                                                                    </tbody>
                                                                </table>
                                                            }
                                                        </div>
                                                    </article>
                                                }
                                            }
                                        }
                                        // ===== End create รายการเอกสารแนบของหน่วยงาน =====

                                        @Html.Partial("~/Views/Track/_ResponseForm_New_Flow.cshtml", viewModel)
                                    }
                                    else
                                    {
                                        if (Model.Status == ApplicationStatusV2Enum.APPROVED_WAITING_PAY_FEE && Model.StatusOther == ApplicationStatusOtherValueConst.WAITING_USER_WORKING)
                                        {
                                            if (Model.Fee.HasValue && Model.Fee > 0)
                                            {
                                                if (isEnableELicense) 
                                                {
                                                    @Html.Partial("~/Views/Track/_ResponseFormEdoc.cshtml", Model,
                                                    new ViewDataDictionary {
                                                        { ViewDataDictConst.AGENT_REMARK, agentRemark },
                                                        { ViewDataDictConst.APPLICATION_NAME, Model.ApplicationName },
                                                        { ViewDataDictConst.REQUESTOR_NAME, requestorName }
                                                    })
                                                }
                                                else 
                                                {
                                                     @Html.Partial("~/Views/Track/_ResponseFormPayFee.cshtml", Model,
                                                    new ViewDataDictionary {
                                                        { ViewDataDictConst.AGENT_REMARK, agentRemark },
                                                        { ViewDataDictConst.APPLICATION_NAME, Model.ApplicationName },
                                                        { ViewDataDictConst.REQUESTOR_NAME, requestorName }
                                                    })
                                                }
                                            }
                                            else
                                            {
                                                @Html.Partial("~/Views/Track/_ResponseFormDeliveryMethod.cshtml", Model,
                                                new ViewDataDictionary {
                                                    { ViewDataDictConst.AGENT_REMARK, agentRemark },
                                                    { ViewDataDictConst.APPLICATION_NAME, Model.ApplicationName },
                                                    { ViewDataDictConst.REQUESTOR_NAME, requestorName }
                                                })
                                            }
                                        }
                                        else
                                        {
                                            var congratViewDataDict = new ViewDataDictionary {
                                                { ViewDataDictConst.AGENT_REMARK, agentRemark },
                                                { ViewDataDictConst.ORG_ADDRESS_TEXT, Model.OrgAddress},
                                                { ViewDataDictConst.ORG_NAME_TH, Model.OrgNameTH.Trim()}
                                            };

                                            if (Model.Status == ApplicationStatusV2Enum.COMPLETED)
                                            {
                                                @Html.Partial("~/Views/Track/CongratulationForm/_CongratFormFinish.cshtml", viewModel, congratViewDataDict)
                                            }
                                            else
                                            {
                                                @Html.Partial("~/Views/Track/_None_RequestForm.cshtml", viewModel,
                                                new ViewDataDictionary {
                                                    { ViewDataDictConst.AGENT_REMARK, agentRemark },
                                                    { ViewDataDictConst.APPLICATION_NAME, Model.ApplicationName },
                                                    { ViewDataDictConst.REQUESTOR_NAME, requestorName },
                                                    { ViewDataDictConst.DELIVERY_METHOD_TEXT, deliveryMethod},
                                                    { ViewDataDictConst.DELIVERY_ADDRESS_TEXT, deliveryAddress }
                                                })
                                            }
                                        }
                                    }

                                </div>
                            </div>
                        }
                    </div>
                    @if ((Model.EPermitFiles != null && Model.EPermitFiles.Count > 0) && BizPortal.Service.ApplicationStatusService.IsEnableEPermitLogic() == true)
                    {
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 epermit-box">
                                <table class="table table-bordered table-striped">
                                    <thead>
                                        <tr>
                                            <th class="text-center" style="width: 40px;">#</th>
                                            <th class="text-center">@Resource.ApplicationStatusRequests.HISTORY_SECTION_HEADER_COLUMN_EPERMIT_FILENAME</th>
                                            <th class="text-center">@Resource.ApplicationStatusRequests.DOCUMENT_FILE_NAME</th>
                                            <th class="text-center" style="width: 250px;">@Resource.ApplicationStatusRequests.HISTORY_SECTION_HEADER_COLUMN_EPERMIT_DESC</th>
                                            <th class="text-center" style="width: 250px;">@Resource.ApplicationStatusRequests.HISTORY_SECTION_HEADER_COLUMN_EPERMIT_EXPIREDATE</th>
                                            <th class="text-center" style="width: 160px;">@Resource.ApplicationStatusRequests.DOCUMENT_DATETIME</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            rows = 1;
                                            foreach (var file in Model.EPermitFiles)
                                            {
                                                <tr>
                                                    <td class="text-left">@rows</td>
                                                    <td class="text-left">@file.EPermitFileName</td>
                                                    <td class="text-left">
                                                        <a target="_blank" href="@Url.Action("GetV2", "File", new { id = file.FileID, rid = Model.ApplicationRequestID, area = "" })" class="file-link">@file.FileName</a>
                                                    </td>
                                                    <td class="text-left">@file.EPermitFileDescription</td>
                                                    <td class="text-left">@file.EPermitExpireDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                                    <td class="text-left">@file.UpdatedDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                                </tr>
                                                rows += 1;
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @{
        SingleFormRendererAppHook singleFormRendererHook = null;
        if (hook is SingleFormRendererAppHook)
        {
            singleFormRendererHook = hook as SingleFormRendererAppHook;
        }
    }

    @if (isEnabledChat)
    {
        <div class="panel panel-default">
            <div class="panel-heading" role="button" data-toggle="collapse" id="headingContactWithStaff" href="#collapseContactWithStaff" aria-expanded="false" aria-controls="collapseContactWithStaff">
                <a href="javascript:void(0)">@Resource.ApplicationStatusRequests.CHAT_SECTION_HEADER</a>
                <span class="fa fa-chevron-down pull-right"></span>
            </div>
            <div id="collapseContactWithStaff" class="panel-collapse collapse" aria-labelledby="headingContactWithStaff">
                @Html.Partial("~/Views/Track/ChatForm/UserChatForm.cshtml", viewModel)
            </div>
        </div>
    }

    <div class="row">
        <div class="col-md-12">
            @if (hook != null)
            {
                if (singleFormRendererHook != null)
                {
                    <div class="panel panel-default">
                        <div class="panel-heading" role="button" data-toggle="collapse" id="headingAppHook" href="#collapseApphook" aria-expanded="true" aria-controls="collapseApphook">
                            <a href="javascript:void(0)">ข้อมูลใบคำร้อง/คำขอ</a>
                            <span class="fa fa-chevron-down pull-right"></span>
                        </div>
                        <div id="collapseApphook" class="panel-collapse collapse" aria-labelledby="headingAppHook">
                            <div class="panel-body">
                                <form>
                                    @{
                                        SingleFormAppsViewModel[] mm = singleFormRendererHook.RenderDataSingleForm(Model, ViewBag);
                                        Html.RenderPartial("~/Areas/Apps/Views/Shared/_StaticFormView.cshtml", mm);
                                    }
                                </form>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    AppHookRenderViewModel hookModel = new AppHookRenderViewModel(hook, RenderStage.UserTracking, new ApplicationRequestViewModel());
                    Mapster.TypeAdapter.Adapt<ApplicationRequestEntity, ApplicationRequestViewModel>(Model, hookModel.Data);
                    Html.RenderPartial("~/Views/Shared/AppRequest/_AppHookRenderer2.cshtml", hookModel);
                }
            }
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading" role="button" data-toggle="collapse" id="headingAttachFiles" href="#collapseAttachFiles" aria-expanded="false" aria-controls="collapseAttachFiles">
            <a href="javascript:void(0)">@Resource.ApplicationStatusRequests.ATTACH_DOCUMENT</a>
            <span class="fa fa-chevron-down pull-right"></span>
        </div>
        <div id="collapseAttachFiles" class="panel-collapse collapse" aria-labelledby="headingAttachFiles">
            <div class="panel-body">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th class="text-center" style="width: 40px;">#</th>
                            <th class="text-left">@Resource.ApplicationStatusRequests.DOCUMENT_NAME</th>
                            <th class="text-left">@Resource.ApplicationStatusRequests.DOCUMENT_FILE_NAME</th>
                            <th class="text-left" style="width: 250px;">@Resource.ApplicationStatusRequests.UPLOAD_FILE_DOC_EXPLANATION</th>
                            <th class="text-left" style="width: 160px;">@Resource.ApplicationStatusRequests.DOCUMENT_DATETIME</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            rows = 1;
                            foreach (var group in Model.UploadedFiles)
                            {
                                if (group.Files != null && group.Files.Count > 0)
                                {
                                    foreach (var file in group.Files)
                                    {
                                        
                                        if (Model.ApplicationRequestVersion > 0 || singleFormRendererHook == null || singleFormRendererHook.IsRelatedFile(file.FileTypeCode))
                                        {
                                            <tr>
                                                <td class="text-center">@rows</td>
                                                <td>
                                                    @Html.Raw(file.GetFileDisplayName(appTranslates))
                                                    <br />
                                                    @if (file.Extras != null && file.Extras.TryGetBool("PREDOC", false))
                                                    {
                                                        <span style="text-align: right;font-weight: 600;font-size: 0.8em;margin-top: 10px;">อัปโหลดอัตโนมัติและได้รับการยืนยันความถูกต้องแล้วจากหน่วยงานเจ้าของเอกสาร</span>
                                                    }
                                                </td>
                                                <td class="text-left">
                                                    @if (file.Extras != null && file.Extras.TryGetBool("PREDOC", false))
                                                    {
                                                        <span>@file.FileName</span>
                                                    }
                                                    else
                                                    {
                                                        <a target="_blank" href="@Url.Action("GetV2", "File", new { id = file.FileID, rid = Model.ApplicationRequestID, area = "" })" class="file-link">@file.FileName</a>
                                                    }

                                                </td>
                                                @{
                                                    string fileReason = "-";
                                                    if (file.Extras != null && file.Extras.ContainsKey("REQUEST_FILE_REASON"))
                                                    {
                                                        fileReason = (string)file.Extras["REQUEST_FILE_REASON"];
                                                    }
                                                }
                                                <td class="text-left">@fileReason</td>
                                                <td class="text-left">@group.UpdatedDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                            </tr>
                                            rows += 1;
                                        }
                                    }
                                }
                            }
                        }
                    </tbody>

                    @if (Model.UploadedFiles == null || Model.UploadedFiles.Count == 0)
                    {
                        <tfoot>
                            <tr>
                                <td colspan="5">
                                    ไม่มีเอกสาร
                                </td>
                            </tr>
                        </tfoot>
                    }
                </table>
            </div>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading" role="button" data-toggle="collapse" id="headingGovFiles" href="#collapseGovFiles" aria-expanded="false" aria-controls="collapseGovFiles">
            <a href="javascript:void(0)">@Resource.ApplicationStatusRequests.GOV_FILES</a>
            <span class="fa fa-chevron-down pull-right"></span>
        </div>
        <div id="collapseGovFiles" class="panel-collapse collapse" aria-labelledby="headingGovFiles">
            <div class="panel-body">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th class="text-center" style="width: 40px;">#</th>
                            <th class="text-center">@Resource.ApplicationStatusRequests.DOCUMENT_NAME</th>
                            <th class="text-center">@Resource.ApplicationStatusRequests.DOCUMENT_FILE_NAME</th>
                            <th class="text-center" style="width: 250px;">@Resource.ApplicationStatusRequests.UPLOAD_FILE_DOC_EXPLANATION</th>
                            <th class="text-center" style="width: 160px;">@Resource.ApplicationStatusRequests.DOCUMENT_DATETIME</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            rows = 1;
                            if (Model.GovFiles != null)
                            {
                                foreach (var file in Model.GovFiles)
                                {
                                    <tr>
                                        <td class="text-center">@rows</td>
                                        <td class="text-left">@file.GovDocumentName</td>
                                        <td class="text-left">
                                            <a target="_blank" href="@Url.Action("GetV2", "File", new { id = file.FileID, rid = Model.ApplicationRequestID, area = "" })" class="file-link">@file.FileName</a>
                                        </td>
                                        <td class="text-left">@file.GovDocumentDescription</td>
                                        <td class="text-left">@file.UpdatedDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                    </tr>
                                    rows += 1;
                                }
                            }

                        }
                    </tbody>
                    @if (Model.GovFiles == null || Model.GovFiles.Count == 0)
                    {
                        <tfoot>
                            <tr>
                                <td colspan="5">
                                    ไม่มีเอกสาร
                                </td>
                            </tr>
                        </tfoot>
                    }
                </table>
            </div>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading" role="button" data-toggle="collapse" id="headingHistories" href="#collapseHistories" aria-expanded="false" aria-controls="collapseHistories">
            <a href="javascript:void(0)">@Resource.ApplicationStatusRequests.APPROVE_STAGE_HISTORY</a>
            <span class="fa fa-chevron-down pull-right"></span>
        </div>
        <div id="collapseHistories" class="panel-collapse collapse" aria-labelledby="headingHistories">
            <div class="panel-body">
                @foreach (var trans in Model.Transactions.Where(o => o.Status != ApplicationStatusV2Enum.DRAFT).OrderByDescending(o => o.CreatedDate))
                {
                    firstRow = true;

                    <section class="comment-list block">
                        <article id="comment-id-1" class="comment-item">
                            <section class="comment-body panel panel-default">
                                <div class="panel-heading bg-white">
                                    @if (trans.ReplyFromOrg)
                                    {
                                        string staffFullName = BizPortal.Service.ApplicationStatusService.GetFullNameByUserUID(trans.UpdatedByAgent);
                                        <a href="#">@staffFullName</a>
                                        <label class="label bg-primary m-l-xs">@ResourceHelper.GetResourceWord(UserTypeEnum.GovernmentAgent.ToString().ToUpper(), "Global")</label>
                                    }
                                    else
                                    {
                                        <a href="javascript:void(0)">@trans.IdentityName</a>
                                        <label class="label m-l-xs" style="background-color:#459647">@ResourceHelper.GetResourceWord(trans.IdentityType.ToString().ToUpper(), "Global")</label>
                                    }
                                    <span class="text-muted m-l-sm">
                                        <i class="fa fa-clock-o"></i>
                                        @trans.UpdatedDate.ToLocalTime().ToString("dd MMM yyyy HH:mm")
                                    </span>
                                </div>
                                <div class="panel-body">
                                    <span class="block">
                                        @if (trans.ApplicationID == 9)
                                        {
                                            if (trans.Status == ApplicationStatusV2Enum.CHECK)
                                            {
                                                <strong>@Resource.ApplicationStatusRequests.STATUS</strong> @ResourceHelper.GetResourceWord("STATUS_PENDING_VAT", "ApplicationStatusRequests")
                                            }
                                            else if (trans.Status == ApplicationStatusV2Enum.COMPLETED)
                                            {
                                                <strong>@Resource.ApplicationStatusRequests.STATUS</strong> Html.Raw("เป็นผู้ประกอบการจดทะเบียน เว้นแต่เข้าลักษณะที่ไม่ออกใบทะเบียน");
                                            }
                                            else
                                            {
                                                <strong>@Resource.ApplicationStatusRequests.STATUS</strong> @ResourceHelper.GetResourceWord("STATUS_" + @trans.Status.ToString().ToUpper(), "ApplicationStatusRequests")
                                            }
                                        }
                                        else
                                        {
                                            <strong>@Resource.ApplicationStatusRequests.STATUS</strong> @ResourceHelper.GetResourceWord("STATUS_" + @trans.Status.ToString().ToUpper(), "ApplicationStatusRequests")
                                        }
                                    </span>

                                    @if (!string.IsNullOrEmpty(trans.Remark))
                                    {
                                        <span class="block" style="word-wrap: break-word;">
                                            @if (trans.ReplyFromOrg)
                                            {
                                                <strong>@Resource.ApplicationStatusRequests.AGENT_COMMENT_REMARK</strong>
                                                @trans.Remark
                                            }
                                            else
                                            {
                                                <strong>@Resource.ApplicationStatusRequests.USER_COMMENT_REMARK_IN_HISTORY</strong>
                                                @trans.Remark
                                            }
                                        </span>
                                    }
                                    
                                    @if (trans.Status == ApplicationStatusV2Enum.APPROVED_WAITING_PAY_FEE || trans.PendingApproveDateTime.HasValue)
                                    {
                                        if (!string.IsNullOrEmpty(trans.PaymentMethod) &&
                                           !string.IsNullOrEmpty(trans.PermitDeliveryType))
                                        {

                                            string paymentMethodTrans = "PAYMENT_" + trans.PaymentMethod;
                                            if (trans.PaymentMethod == "AT_OWNER_ORG")
                                            {
                                                paymentMethodTrans = !string.IsNullOrEmpty(Model.PaymentMethodOrgDetail) ? Model.PaymentMethodOrgDetail : Model.OrgNameTH.Trim();
                                            }

                                            <span class="block">
                                                <strong> @Resource.ApplicationStatusRequests.PAY_FEE_CHANNEL</strong> @ResourceHelper.GetResourceWordWithDefault(paymentMethodTrans, "ApplicationStatusRequests", paymentMethodTrans, System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName)
                                            </span>

                                            string deliveryMethodTrans = "PDT_" + trans.PermitDeliveryType;
                                            if (trans.PermitDeliveryType == "AT_OWNER_ORG")
                                            {
                                                deliveryMethodTrans = !string.IsNullOrEmpty(Model.PermitDeliveryOrgDetail) ? Model.PermitDeliveryOrgDetail : Model.OrgNameTH.Trim();
                                            }

                                            if (trans.PermitDeliveryType == "E_DOCUMENT")
                                            {
                                                deliveryMethodTrans = "E-Document";
                                            }

                                            <span class="block">
                                                <strong> @Resource.ApplicationStatusRequests.RECEIVE_APP_CHANNEL</strong> @ResourceHelper.GetResourceWordWithDefault(deliveryMethodTrans, "ApplicationStatusRequests", deliveryMethodTrans, System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName)
                                            </span>
                                        }

                                        if (trans.DueDateForPayFee.HasValue)
                                        {
                                            <span class="block">
                                                <strong>@Resource.ApplicationStatusRequests.DUE_DATE_PAY_FEE</strong> @trans.DueDateForPayFee.Value.ToString(thisPageDateFormat)
                                            </span>
                                        }

                                        if (trans.Fee.HasValue)
                                        {
                                            <span class="block">
                                                <strong>@Resource.ApplicationStatusRequests.FEE_OF_APPLICATION</strong> @trans.Fee.Value.ToString("#,##0.00") @Resource.ApplicationStatusRequests.BATH
                                            </span>
                                        }
                                        if (trans.PermitDeliveryType == PermitDeliveryTypeValueConst.BY_MAIL)
                                        {
                                            var EMSFeeText = trans.EMSFee != null ? trans.EMSFee.Value.ToString("#,##0.00") : "0.00";
                                            var EMSFeePaymentBy = (trans.EMSFeePaymentType == null || trans.EMSFeePaymentType == "") ? "" : "( " + @ResourceHelper.GetResourceWord("EMS_FEE_PAYMENT_BY_" + trans.EMSFeePaymentType + "_TEXT", "ApplicationStatusRequests") + " )";
                                            <span class="block">
                                                <strong>@Resource.ApplicationStatusRequests.EMS_FEE_OF_APPLICATION</strong> @EMSFeeText @Resource.ApplicationStatusRequests.BATH @EMSFeePaymentBy
                                            </span>
                                        }
                                        if (trans.PermitDeliveryType != PermitDeliveryTypeValueConst.BY_MAIL)
                                        {
                                            if (trans.UserCanGetAppDate.HasValue)
                                            {
                                                <span class="block">
                                                    <strong>@Resource.ApplicationStatusRequests.GOT_APP_DATE</strong> @trans.UserCanGetAppDate.Value.ToString(thisPageDateFormat)
                                                </span>
                                            }
                                        }
                                    }

                                    @if (trans.RequestedFiles != null && trans.RequestedFiles.Count > 0)
                                    {
                                        rows = 1;
                                        <span class="block">
                                            <strong>@Resource.ApplicationStatusRequests.REQUEST_FILE</strong>
                                        </span>
                                        <table id="tbRequestFiles" class="table table-bordered table-striped">
                                            <thead>
                                                <tr>
                                                    <th class="text-center" style="width: 40px;">#</th>
                                                    <th class="text-left" style="width: 250px;">@Resource.ApplicationStatusRequests.DOCUMENT_NAME</th>
                                                    <th class="text-left" style="width: 250px;">@Resource.ApplicationStatusRequests.DOCUMENT_REASON</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var file in trans.RequestedFiles)
                                                {
                                                <tr>
                                                    <td class="text-center">@rows</td>
                                                    @*<td class="text-left">@BizPortal.Service.TrackService.fileNameFunc(file, appTranslates)</td>*@
                                                    <td class="text-left">@file.FileName</td>
                                                    <td class="text-left">@file.FileReason</td>
                                                </tr>
                                                    rows += 1;
                                                }
                                            </tbody>
                                        </table>
                                    }

                                    @if ((trans.UploadedFiles != null && trans.UploadedFiles.Count > 0 && trans.UploadedFiles.SelectMany(o => o.Files).Any()) ||
                                        (trans.IdentityType == UserTypeEnum.GovernmentAgent && trans.GovFiles != null && trans.GovFiles.Count > 0))
                                    {
                                        if (trans.IdentityType == UserTypeEnum.GovernmentAgent && trans.GovFiles != null && trans.GovFiles.Count > 0)
                                        {
                                            rows = 1;
                                            <span class="block">
                                                <br /><strong>@Resource.ApplicationStatusRequests.ATTACH_DOCUMENT_OF_STAFF</strong>
                                            </span>
                                            <table class="table table-bordered table-striped">
                                                <thead>
                                                    <tr>
                                                        <th class="text-center" style="width: 40px;">#</th>
                                                        <th class="text-left" style="width: 150px;">@Resource.ApplicationStatusRequests.DOCUMENT_NAME</th>
                                                        <th class="text-left" style="width: 150px;">@Resource.ApplicationStatusRequests.DOCUMENT_FILE_NAME</th>
                                                        
                                                        @if (trans.ReplyFromOrg) 
                                                        {
                                                            <th class="text-left" style="width: 250px;">@Resource.ApplicationStatusRequests.UPLOAD_FILE_DOC_EXPLANATION</th>
                                                        }

                                                        <th class="text-left" style="width: 160px;">@Resource.ApplicationStatusRequests.DOCUMENT_DATETIME</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var file in trans.GovFiles)
                                                    {
                                                        string fileTypeName = "";
                                                        string fileRequestedName = "-";
                                                        string fileRequestedDesc = "-";
                                                        bool isHaveFileTypeCode = false;
                                                        fileRequestedName = file.GovDocumentName;
                                                        fileRequestedDesc = file.GovDocumentDescription;
                                                        if (file.Extras != null)
                                                        {
                                                            if (file.Extras.ContainsKey("FILETYPECODE"))
                                                            {
                                                                fileTypeName = file.Extras["FILETYPECODE"].ToString();
                                                                if (!string.IsNullOrEmpty(fileTypeName))
                                                                {
                                                                    isHaveFileTypeCode = true;
                                                                }
                                                            }

                                                            if (file.Extras.ContainsKey("REQUEST_FILE_NAME") && !isHaveFileTypeCode)
                                                            {
                                                                fileRequestedName = (string)file.Extras["REQUEST_FILE_NAME"];
                                                            }
                                                            if (file.Extras.ContainsKey("REQUEST_FILE_REASON") && !isHaveFileTypeCode)
                                                            {
                                                                fileRequestedDesc = (string)file.Extras["REQUEST_FILE_REASON"];
                                                            }
                                                        }
                                                        <tr>
                                                            <td class="text-left">@rows</td>
                                                            @if (isHaveFileTypeCode)
                                                            {
                                                                <td>@ResourceHelper.GetResourceWordWithDefault(fileTypeName, "Apps_SingleForm_Filelist", fileTypeName)</td>
                                                            }
                                                            else
                                                            {
                                                                <td>@fileRequestedName</td>
                                                            }

                                                            <td class="text-left">
                                                                <a target="_blank" href="@Url.Action("GetV2", "File", new { id = file.FileID, rid = Model.ApplicationRequestID, area = "" })" class="file-link">@file.FileName</a>
                                                            </td>
                                                            
                                                            @if (trans.ReplyFromOrg) 
                                                            {
                                                                <td class="text-left">@fileRequestedDesc</td>
                                                            }

                                                            <td class="text-left">@file.UpdatedDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                                        </tr>
                                                        rows += 1;
                                                    }
                                                </tbody>
                                            </table>
                                        }
                                        if (trans.UploadedFiles != null && trans.UploadedFiles.Count > 0)
                                        {
                                            var fileCnt = 0;
                                            foreach (var group in trans.UploadedFiles)
                                            {
                                                if (group.Files != null && group.Files.Count > 0)
                                                {
                                                    foreach (var file in group.Files)
                                                    {
                                                        if (Model.ApplicationRequestVersion > 0 || singleFormRendererHook == null || singleFormRendererHook.IsRelatedFile(file.FileTypeCode))
                                                        {
                                                            fileCnt++;
                                                        }
                                                    }
                                                }
                                            }
                                            if (fileCnt > 0)
                                            {
                                                <span class="block">
                                                    <br /><strong>@Resource.ApplicationStatusRequests.ATTACH_DOCUMENT</strong>
                                                </span>
                                            }
                                            firstRow = true;
                                            foreach (var group in trans.UploadedFiles)
                                            {
                                                if (!firstRow)
                                                {
                                                    <div class="line pull-in"></div>
                                                }
                                                firstRow = false;

                                                <article class="media">
                                                    <div class="media-body">
                                                        @if (group.Files != null && group.Files.Count > 0)
                                                        {
                                                            var relatedFiles = group.Files;
                                                            if (singleFormRendererHook != null)
                                                            {
                                                                relatedFiles = singleFormRendererHook.GetRelatedFiles(relatedFiles);
                                                            }

                                                            if (relatedFiles.Count > 0)
                                                            {
                                                                if (group.Extras != null && group.Extras.Count > 0)
                                                                {
                                                                    <blockquote class="fs12 row">
                                                                        @foreach (var extra in group.Extras.Where(o => o.Key != "UPLOADERID"))
                                                                        {
                                                                            <div class="col-md-4">
                                                                                <strong>@ResourceHelper.GetResourceWordWithDefault(extra.Key, "ExtraKey", extra.Key)</strong> @BizPortal.Service.TrackService.fileNameByCodeFunc(appTranslates, extra.Value.ToString())
                                                                            </div>
                                                                        }
                                                                    </blockquote>
                                                                }
                                                                rows = 1;
                                                                <label>@ResourceHelper.GetResourceWordWithDefault(group.Description, "Apps_SingleForm_Filegroup", group.Description)</label>
                                                                <table class="table table-bordered table-striped">
                                                                    <thead>
                                                                        <tr>
                                                                            <th class="text-center" style="width: 40px;">#</th>
                                                                            <th class="text-left" style="width: 250px;">@Resource.ApplicationStatusRequests.DOCUMENT_NAME</th>
                                                                            <th class="text-left" style="width: 150px;">@Resource.ApplicationStatusRequests.DOCUMENT_FILE_NAME</th>
                                                                            
                                                                            @if (trans.ReplyFromOrg) 
                                                                            {
                                                                                <th class="text-left" style="width: 200px;">@Resource.ApplicationStatusRequests.UPLOAD_FILE_DOC_EXPLANATION</th>
                                                                            }

                                                                            <th class="text-left" style="width: 160px;">@Resource.ApplicationStatusRequests.DOCUMENT_DATETIME</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        @foreach (var file in group.Files)
                                                                        {
                                                                            if (Model.ApplicationRequestVersion > 0 || singleFormRendererHook == null || singleFormRendererHook.IsRelatedFile(file.FileTypeCode))
                                                                            {
                                                                                <tr>

                                                                                    <td class="text-center">@rows</td>
                                                                                    <td class="text-left">
                                                                                        @Html.Raw(file.GetFileDisplayName())
                                                                                        <br />
                                                                                        @if (file.Extras.TryGetBool("PREDOC", false))
                                                                                        {
                                                                                            <span style="text-align: right;font-weight: 600;font-size: 0.8em;margin-top: 10px;">อัปโหลดอัตโนมัติและได้รับการยืนยันความถูกต้องแล้วจากหน่วยงานเจ้าของเอกสาร</span>
                                                                                        }
                                                                                    </td>
                                                                                    <td class="text-left">
                                                                                        @if (file.Extras.TryGetBool("PREDOC", false))
                                                                                        {
                                                                                            <span>@file.FileName</span>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            <a target="_blank" href="@Url.Action("GetV2", "File", new { id = file.FileID, rid = Model.ApplicationRequestID, area = "" })" class="file-link">@file.FileName</a>
                                                                                        }

                                                                                    </td>
                                                                                    @{
                                                                                        string fileReason = "-";
                                                                                        if (file.Extras != null &&
                                                                                            file.Extras.ContainsKey("REQUEST_FILE_REASON"))
                                                                                        {
                                                                                            fileReason = (string)file.Extras["REQUEST_FILE_REASON"];
                                                                                        }
                                                                                    }

                                                                                    @if (trans.ReplyFromOrg)
                                                                                    {
                                                                                        <td class="text-left">@fileReason</td>
                                                                                    }
                                                                                    <td class="text-left">@group.UpdatedDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                                                                </tr>
                                                                                rows += 1;
                                                                            }
                                                                        }
                                                                    </tbody>
                                                                </table>
                                                            }
                                                        }
                                                    </div>
                                                </article>
                                            }
                                        }
                                    }
                                    @if (trans.EPermitFiles != null && trans.EPermitFiles.Count > 0)
                                    {
                                        <span class="block">
                                            <br /><strong>@Resource.ApplicationStatusRequests.HISTORY_SECTION_EPERMIT_HEADER</strong>
                                        </span>

                                        if (trans.IdentityType == UserTypeEnum.GovernmentAgent)
                                        {
                                            rows = 1;
                                            <table class="table table-bordered table-striped">
                                                <thead>
                                                    <tr>
                                                        <th class="text-center" style="width: 40px;">#</th>
                                                        <th class="text-center" style="width: 150px;">@Resource.ApplicationStatusRequests.HISTORY_SECTION_HEADER_COLUMN_EPERMIT_FILENAME</th>
                                                        <th class="text-center" style="width: 150px;">@Resource.ApplicationStatusRequests.DOCUMENT_FILE_NAME</th>
                                                        <th class="text-center" style="width: 250px;">@Resource.ApplicationStatusRequests.HISTORY_SECTION_HEADER_COLUMN_EPERMIT_DESC</th>
                                                        <th class="text-center" style="width: 250px;">@Resource.ApplicationStatusRequests.HISTORY_SECTION_HEADER_COLUMN_EPERMIT_EXPIREDATE</th>
                                                        <th class="text-center" style="width: 160px;">@Resource.ApplicationStatusRequests.DOCUMENT_DATETIME</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var file in trans.EPermitFiles)
                                                    {
                                                        string fileTypeName = "";
                                                        string fileEpermitFileName = "-";
                                                        string fileEpermitDesc = "-";
                                                        bool isHaveFileTypeCode = false;
                                                        fileEpermitFileName = file.EPermitFileName;
                                                        fileEpermitDesc = file.EPermitFileDescription;
                                                        if (file.Extras != null)
                                                        {
                                                            if (file.Extras.ContainsKey("FILETYPECODE"))
                                                            {
                                                                fileTypeName = file.Extras["FILETYPECODE"].ToString();
                                                                if (!string.IsNullOrEmpty(fileTypeName))
                                                                {
                                                                    isHaveFileTypeCode = true;
                                                                }
                                                            }
                                                        }
                                                        <tr>
                                                            <td class="text-center">@rows</td>
                                                            @if (isHaveFileTypeCode)
                                                            {
                                                                <td class="text-left">@ResourceHelper.GetResourceWordWithDefault(fileTypeName, "Apps_SingleForm_Filelist", fileTypeName)</td>
                                                            }
                                                            else
                                                            {
                                                                <td class="text-left">@fileEpermitFileName</td>
                                                            }
                                                            <td class="text-left">
                                                                <a target="_blank" href="@Url.Action("GetV2", "File", new { id = file.FileID, rid = Model.ApplicationRequestID, area = "" })" class="file-link">@file.FileName</a>
                                                            </td>
                                                            <td class="text-left">@fileEpermitDesc</td>
                                                            <td class="text-left">@file.EPermitExpireDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                                            <td class="text-left">@file.UpdatedDate.ToLocalTime().ToString(thisPageDateTimeFormat)</td>
                                                        </tr>
                                                        rows += 1;
                                                    }
                                                </tbody>
                                            </table>
                                        }
                                    }
                                </div>
                            </section>
                        </article>
                    </section>
                }
            </div>
        </div>
    </div>
</div>

@section PageScripts {
    <script type="text/javascript" src="@Url.Content("~/Scripts/SingleForm-frontis/main.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/SingleForm-frontis/helpers/form-helper.js")"></script>
    <script type="text/javascript">
        window.singleForm = {
            allApps: ['@viewModel.AppSysName']
        }

        $(document).ready(function () {
            $('.file-size').each(function () {
                var size = parseFloat($(this).text());
                $(this).text(plupload.formatSize(size));
            });
        });
    </script>

    @if (hook is SingleFormRendererAppHook)
    {
        Dictionary<string, object> defaults = ViewBag.Defaults;
        FormSectionGroup[] sectionGroups = ViewBag.SectionGroups;
        FormSection[] sections = ViewBag.Sections;
        FormSectionRow[] sectionRows = ViewBag.SectionRows;
        <script type="text/javascript">
            var batchID = null;
            var confirmation = {
                variables: {
                    @foreach (var sec in sections.Where(o => o.Type == SectionType.ArrayOfForms))
                    {
                        <text>
                        @string.Format("arrObj{0}", sec.Section): { data: [], section: "@sec.Section" },
                        </text>
                    }
                },
                controls: {
                    form: '#frmConfirmation'
                },
                functions: {
                    init: function () {
                        confirmation.functions.getData();
                    },
                    renderHandlebars: function (obj) {
                        var source = $("#" + obj.section + "Template").html();
                        var template = Handlebars.compile(source);
                        $("#insert_" + obj.section).html(template(obj));
                    },
                    getData: function () {
                        var data = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.SingleFormData));
                        if (data) {
                            for (var i = 0; i < data.SectionData.length; i++) {
                                var sec = data.SectionData[i];
                                if (sec.Type == "Form") {
                                    for (var key in sec.FormData) {
                                        var datavalue = sec.FormData[key];
                                        if (key.includes("ADDRESS_PROVINCE") || key.includes("ADDRESS_AMPHUR") || key.includes("ADDRESS_TUMBOL") || key.includes("AJAX_DROPDOWN") || key.includes("ADDRESS_EN_PROVINCE") || key.includes("ADDRESS_EN_AMPHUR") || key.includes("ADDRESS_EN_TUMBOL") ) {
                                            if (key.includes("_TEXT")) {
                                                $("input[name=" + key + "]").val(datavalue);
                                            } else {
                                                $("select[name=" + key + "]")
                                                    .prepend("<option value='" + datavalue + "'>" + sec.FormData[key + "_TEXT"] + "</option>")
                                                    .val(datavalue);
                                            }
                                        } else if (key.includes("CHECKBOXES")) {
                                            if (datavalue.constructor == String) {
                                                datavalue = JSON.parse(datavalue);
                                            }
                                            $.each(datavalue, function (i, e) {
                                                $("input[type=checkbox][name=" + key + "][value=" + e + "]").prop('checked', true).trigger('change');
                                            });
                                        } else if (key.includes("_REPEATER")) {

                                            if (datavalue.constructor == String) {
                                                datavalue = JSON.parse(datavalue);
                                            }

                                            if (eval('typeof $rpt' + key) !== "undefined") {
                                                eval('$rpt' + key).setList(datavalue);
                                            }

                                        } else {
                                            if ($("input[type=text][name=" + key + "]").length == 1) { // Text Box
                                                $("input[name=" + key + "]").val(datavalue);
                                            } else if ($("input[type=hidden][name=" + key + "]").length == 1) { // Hidden
                                                $("input[name=" + key + "]").val(datavalue).trigger('change');
                                            } else if ($("input[type=radio][name=" + key + "]").length > 0) { // Radio Button
                                                $("input[name=" + key + "][value=" + datavalue + "]").prop('checked', true).trigger('change');
                                            } else if ($("input[type=checkbox][name=" + key + "]").length == 1 && datavalue == "true") { // Check Box
                                                $("input[name=" + key + "]").prop('checked', true).trigger('change');
                                            } else if ($("select[name=" + key + "]").length == 1) { // Select2
                                                $("select[name=" + key + "]").val(datavalue).trigger('change');
                                            } else if ($("textarea[name=" + key + "]").length == 1) { // textarea
                                                $("textarea[name=" + key + "]").val(sec.FormData[key]).trigger('change');
                                            } else if ($("input[type=text]#" + key).length == 1) { // Dropdown
                                                $("input[type=text]#" + key).val(sec.FormData[key]).trigger('change');
                                            } else if ($("input[role=DATATABLE_VALUE]#" + key).length == 1) { // DataTable
                                                $("input[role=DATATABLE_VALUE]#" + key).val(sec.FormData[key]).trigger('change');
                                            }

                                        }
                                    }
                                } else if (sec.Type == "ArrayOfForms" && sec.ArrayData != null) {
                                    if (confirmation.variables["arrObj" + sec.SectionName] != null || confirmation.variables["arrObj" + sec.SectionName] != undefined) {
                                        confirmation.variables["arrObj" + sec.SectionName].data = sec.ArrayData;
                                        confirmation.functions.renderHandlebars(confirmation.variables["arrObj" + sec.SectionName]);

                                         // Frontis: Trigger databound event on this arrayOfForm
                                        $(document).trigger(sec.SectionName + '-databound', [sec.SectionName, confirmation.variables["arrObj" + sec.SectionName].data]);
                                    }
                                }
                            }

                            setTimeout(function () {
                                // Frontis: Propagate application-databound event to let listeners perform their actions once data is loaded.
                                $(document).trigger('application-request-databound', [data]);
                            }, 500);
                        }
                    }
                }
            }

            $(document).ready(function () {
                showLoader(true);

                // Register handlebars functions *** IMPORTANT !!! Always call it first ***
                Handlebars.registerHelper("x", function(expression, options) {
                    var result;
                    // you can change the context, or merge it with options.data, options.hash
                    var context = this;
                    // yup, i use 'with' here to expose the context's properties as block variables
                    // you don't need to do {{x 'this.age + 2'}}
                    // but you can also do {{x 'age + 2'}}
                    // HOWEVER including an UNINITIALIZED var in a expression will return undefined as the result.
                    with(context) {
                        result = (function() {
                            try {
                                return eval(expression);
                            } catch (e) {
                                console.warn('•Expression: {{x \'' + expression + '\'}}\n•JS-Error: ', e, '\n•Context: ', context);
                            }
                        }).call(context); // to make eval's lexical this=context
                    }
                    return result;
                });

                Handlebars.registerHelper("xif", function(expression, options) {
                    return Handlebars.helpers["x"].apply(this, [expression, options]) ? options.fn(this) : options.inverse(this);
                });
                // End Registering Handlebars functions

                // Normal Javascripts Begin
                confirmation.functions.init();

                $(window).load(function(){
                    showLoader(false);
                });
            });
        </script>

        <style>
            .comunication .body {
                display: inline-block;
                width: 100%;
                padding: 10px 15px;
                box-shadow: 0 0 0 1px #000;
                margin-bottom: 20px;
            }
        </style>
    }

}
